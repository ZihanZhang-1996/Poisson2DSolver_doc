{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u9996\u9875","text":"<p>\u4e8c\u7ef4\u975e\u7ebf\u6027\u67cf\u677e\u65b9\u7a0b\u6709\u9650\u5143\u6c42\u89e3\u5668\uff0cc++</p> <p>Github\u5730\u5740\uff1a</p> <p>https://github.com/ZihanZhang-1996/Poisson2DSolver</p> <p>-by Zihan Zhang [zihan.zhang-1@colorado.edu]</p>"},{"location":"Q1/","title":"\u89e3\u6790\u89e3\u548c\u6570\u503c\u89e3\u7684\u6bd4\u8f83","text":""},{"location":"Q1/#_1","title":"\u4f8b\u5b50","text":"<p>\u6c42\u89e3\u533a\u57df:  $$ x=[0, 1], y=[0, 1] $$</p> <p>\u8fb9\u6761\u4ef6:  $$ u_{cd}=\\hat{u}, u_{ab}=u_{bc}=u_{ad}=0, f=0. $$</p> <p>\u89e3\u6790\u89e3\u4e3a\uff1a $$ u(x, y)=\\frac{4 \\hat{u}}{\\pi} \\sum_{n=1,3,5, \\ldots}^{\\infty} \\frac{\\sin \\frac{n \\pi}{l_x} x \\sinh \\frac{n \\pi}{l_x} y}{n \\sinh \\frac{n \\pi}{l_x} l_y} $$</p> <p>\u6570\u503c\u89e3\u91c7\u752816x16\u7684\u683c\u5b50:</p> Fig 1. \u6570\u503c\u89e3\uff0c\u8868\u793a\u5728nodes\u4e0a\u7684u\u7684\u503c. \uff08\u4f7f\u7528\u5f00\u53d1\u7684c++\u6c42\u89e3\u5668\u6c42\u89e3\uff0cpython\u753b\u56fe\uff09 <p>\u89e3\u6790\u89e3\uff0c\u8003\u8651\u6c42\u548c\u5f0f\u4e2d\u524d50\u9879\uff1a</p> Fig 2. \u89e3\u6790\u89e3\uff0c\u5728nodes\u5904evaluate. <p>\u53ef\u4ee5\u770b\u51fa\u6570\u503c\u89e3\u4e0e\u89e3\u6790\u89e3\u975e\u5e38\u63a5\u8fd1\u3002</p> <p>\u8bef\u5dee\u5206\u6790\uff1a</p> <p>\u4e0b\u56fe\u8868\u793a\u89e3\u6790\u89e3\u4e0e\u6570\u503c\u89e3\u4e4b\u5dee\uff0c\u53ef\u4ee5\u770b\u51fa\u8bef\u5dee\u8f83\u5927\u7684\u5730\u65b9\u5728\u5de6\u4e0a\u548c\u53f3\u4e0a\u89d2\uff0c\u7ea6\u4e3a6%\uff0c\u8fd9\u662f\u56e0\u4e3a\u8fb9\u6761\u4ef6\u5728\u6b64\u5904\u4e0d\u8fde\u7eed\u3002</p> Fig 3. \uff5c\u89e3\u6790\u89e3-\u6570\u503c\u89e3\uff5c."},{"location":"Q2/","title":"\u7a00\u758f\u548c\u7a20\u5bc6\u77e9\u9635\u7684\u6bd4\u8f83","text":""},{"location":"Q2/#_1","title":"\u7a00\u758f\u77e9\u9635\u6c42\u89e3\u65f6\u95f4","text":"<p>\u4e0b\u9762\u4f7f\u7528\u4e86\u7a00\u758f\u77e9\u9635\u6c42\u89e3\u201c\u89e3\u6790\u89e3\u548c\u6570\u503c\u89e3\u6bd4\u8f83\u201d\u4e00\u8282\u4e2d\u7684\u4f8b\u5b50\uff0c\u4f7f\u7528\u4e86\u4e0d\u540c\u89c4\u6a21\u7684\u7f51\u683c\uff1a16x16\uff0c32x32\uff0c64x64\uff0c128x128\u3002\u8017\u65f6\u5206\u522b\u4e3a136ms\uff0c756ms\uff0c3738ms\uff0c18030ms\u3002\u53ef\u4ee5\u770b\u51fa\u8ba1\u7b97\u590d\u6742\u5ea6\\(O(n^x)\\), \\(1&lt;x&lt;2\\)\u3002\u7b26\u5408\u7a00\u758f\u77e9\u9635\u7684\u8ba1\u7b97\u590d\u6742\u5ea6\u3002  Fig 1. \u7a00\u758f\u77e9\u9635 16x16\uff0c\u8017\u65f6136ms. Fig 2. \u7a00\u758f\u77e9\u9635 32x32\uff0c\u8017\u65f6756ms. Fig 3. \u7a00\u758f\u77e9\u9635 64x64 3738ms. Fig 4. \u7a00\u758f\u77e9\u9635 128x128\uff0c\u8017\u65f618030ms."},{"location":"Q2/#_2","title":"\u7a20\u5bc6\u77e9\u9635\u6c42\u89e3\u65f6\u95f4","text":"<p>\u4e0b\u9762\u4f7f\u7528\u4e86\u7a20\u5bc6\u77e9\u9635\u6c42\u89e3\u201c\u89e3\u6790\u89e3\u548c\u6570\u503c\u89e3\u6bd4\u8f83\u201d\u4e00\u8282\u4e2d\u7684\u4f8b\u5b50\uff0c\u4f7f\u7528\u4e86\u4e0d\u540c\u89c4\u6a21\u7684\u7f51\u683c\uff1a16x16\uff0c32x32\uff0c64x64\u3002\u8017\u65f6\u7ea6\u4e3a1\u79d2\uff0c1\u5206\u949f\uff0c1\u5c0f\u65f6\u3002\u53ef\u4ee5\u770b\u51fa\u8ba1\u7b97\u590d\u6742\u5ea6\\(O(n^x)\\), \\(x\\approx 4\\)\u3002\u7b26\u5408\u7a20\u5bc6\u77e9\u9635\u7684\u89c4\u5f8b\u3002</p> Fig 5. \u7a20\u5bc6\u77e9\u9635 16x16\uff0c\u8017\u65f61308ms. Fig 6. \u7a20\u5bc6\u77e9\u9635 32x32\uff0c\u8017\u65f661942ms. Fig 7. \u7a20\u5bc6\u77e9\u9635 64x64\uff0c\u8017\u65f63560577ms."},{"location":"ctest/","title":"\u5355\u5143\u6d4b\u8bd5\u8bf4\u660e","text":"<p>\u672c\u9879\u76ee\u5305\u542b\u4e24\u4e2a\u6700\u57fa\u7840\u7684\u5355\u5143\u6d4b\u8bd5\uff0c\u4f4d\u4e8e <code>test/test_basic.cpp</code>\u3002</p>"},{"location":"ctest/#test-1","title":"Test 1: \u7f51\u683c\u8282\u70b9\u4e0e\u5355\u5143\u6570\u68c0\u67e5","text":"<p>\u51fd\u6570\uff1a <code>test_mesh_basic()</code></p> <ul> <li> <p>\u6784\u9020\u4e00\u4e2a <code>2x2</code> \u7684\u4e09\u89d2\u5f62\u7f51\u683c\uff08\u5373 <code>nx=2, ny=2</code>\uff09\u3002  </p> </li> <li> <p>\u68c0\u67e5\uff1a</p> </li> <li> <p>\u8282\u70b9\u6570\u662f\u5426\u4e3a <code>(nx+1) * (ny+1) = 9</code>\u3002 </p> </li> <li> <p>\u5355\u5143\u6570\u662f\u5426\u4e3a <code>nx * ny * 2 = 8</code>\uff08\u6bcf\u4e2a\u77e9\u5f62\u5355\u5143\u5206\u6210\u4e24\u4e2a\u4e09\u89d2\u5f62\uff09\u3002  </p> </li> </ul> <p>\u76ee\u7684\uff1a \u9a8c\u8bc1\u7f51\u683c\u751f\u6210\u903b\u8f91\u662f\u5426\u6b63\u786e\u3002</p>"},{"location":"ctest/#test-2-dirichlet","title":"Test 2: Dirichlet \u8fb9\u754c\u6761\u4ef6\u68c0\u67e5","text":"<p>\u51fd\u6570\uff1a <code>test_dirichlet_bc()</code></p> <ul> <li> <p>\u6784\u9020\u4e00\u4e2a <code>1x1</code> \u7684\u77e9\u5f62\u5355\u5143\u3002  </p> </li> <li> <p>\u8bbe\u7f6e Dirichlet \u8fb9\u754c\u6761\u4ef6\uff1a\u6240\u6709\u8fb9\u754c\u70b9\u7684\u8fb9\u754c\u503c\u56fa\u5b9a\u4e3a 1\u3002  </p> </li> <li> <p>\u521d\u59cb\u89e3 <code>u=0</code>\uff0c\u6b64\u65f6\u6b8b\u5dee\u5b9a\u4e49\u4e3a <code>R(i) = u(i) - gD(i)</code>\uff0c\u56e0\u6b64\u5e94\u4e3a <code>-1</code>\u3002  </p> </li> <li> <p>\u68c0\u67e5\uff1a\u6240\u6709\u8fb9\u754c\u70b9\u6b8b\u5dee <code>R(i)</code> \u662f\u5426\u7b49\u4e8e <code>-1</code>\u3002</p> </li> </ul> <p>\u76ee\u7684\uff1a \u9a8c\u8bc1\u8fb9\u754c\u6761\u4ef6\u662f\u5426\u6b63\u786e\u65bd\u52a0\u5230\u6b8b\u5dee\u5411\u91cf\u4e2d\u3002</p>"},{"location":"ctest/#_2","title":"\u8fd0\u884c\u65b9\u6cd5","text":"<p>\u5728\u6784\u5efa\u76ee\u5f55\u4e0b\u6267\u884c\uff1a</p> <pre><code>ctest -V\n</code></pre> Fig. 1 \u5355\u5143\u6d4b\u8bd5\u7ed3\u679c"},{"location":"graph/","title":"\u7a0b\u5e8f\u6d41\u7a0b\u56fe","text":"<p>\u4e0b\u9762\u662f\u4e00\u4e2a\u7b80\u6613\u7684\u7a0b\u5e8f\u6d41\u7a0b\u56fe\uff1a</p> <pre><code>graph TD\n    client[\"&lt;b&gt;client (main.cpp)&lt;/b&gt;\\n\u7a0b\u5e8f\u5165\u53e3\uff0c\u8bfb\u53d6\u8f93\u5165\uff0c\u8ba1\u65f6\uff0c\u8c03\u7528\u6c42\u89e3/\u5bfc\u51fa\"]\n\n    mesh[\"&lt;b&gt;pde2d::mesh_2d&lt;/b&gt;\\n\u7c7b: Mesh2D, Element, Node\\n\u529f\u80fd: \u7f51\u683c\u8282\u70b9/\u5355\u5143\u751f\u6210\u4e0e\u5b58\u50a8\"]\n    prob[\"&lt;b&gt;pde2d::problem&lt;/b&gt;\\n\u7c7b: ProblemExpr2D\\n\u529f\u80fd: f(u,x,y), df/du, Dirichlet gD(x,y), \u57df\u8fb9\u754c\"]\n    fem[\"&lt;b&gt;pde2d::fem_2d&lt;/b&gt;\\n\u51fd\u6570: assembleForIteration()\\n\u529f\u80fd: \u5355\u5143\u88c5\u914d(K,R)\uff0c\u65bd\u52a0Dirichlet\uff08\u7a00\u758f\uff09\"]\n    solver[\"&lt;b&gt;pde2d::solver&lt;/b&gt;\\n\u7c7b: Newton2DOptions\\n\u51fd\u6570: newton_solve_2D()\\n\u529f\u80fd: Newton \u8fed\u4ee3\uff08\u53ef\u65e0\u963b\u5c3c/\u56de\u6eaf\uff09\"]\n    io[\"&lt;b&gt;pde2d::io&lt;/b&gt;\\n\u51fd\u6570: load_config_from_json(), save_u_matrix_csv()\\n\u529f\u80fd: \u8bfb\u53d6\u914d\u7f6e/\u5bfc\u51fa\u7ed3\u679c\"]\n    expr[\"&lt;b&gt;third_party::exprtk&lt;/b&gt;\\n\u529f\u80fd: \u6570\u5b66\u8868\u8fbe\u5f0f\u89e3\u6790\"]\n    quad[\"&lt;b&gt;pde2d::fem_2d::quadrature_boost&lt;/b&gt;\\n\u529f\u80fd: Gauss \u79ef\u5206(\u4e09\u89d2\u5f62/\u77e9\u5f62) \u8ba1\u7b97 Ke/Fe\"]\n    boost[\"&lt;b&gt;third_party::boost&lt;/b&gt;\\n\u529f\u80fd: \u63d0\u4f9b\u9ad8\u7cbe\u5ea6\u7684 Gaussian \u79ef\u5206\"]\n\n    client --&gt; io\n    client --&gt; solver\n    client --&gt; mesh\n    client --&gt; prob\n\n    solver --&gt; fem\n    solver --&gt; mesh\n    solver --&gt; prob\n\n    fem --&gt; mesh\n    fem --&gt; prob\n    fem --&gt; quad\n\n    io --&gt; mesh\n    io --&gt; prob\n    io --&gt; solver\n\n    prob --&gt; expr\n    quad --&gt; boost\n</code></pre>"},{"location":"input/","title":"\u8f93\u5165\u6587\u4ef6","text":"<p>\u4f7f\u7528json\u4f5c\u4e3a\u8f93\u5165\u6587\u4ef6</p>"},{"location":"input/#_1","title":"\u4f7f\u7528\u65b9\u6cd5","text":"<p>\u6dfb\u52a0\u8f93\u5165\u6587\u4ef6\u5230input\u76ee\u5f55\u4e0b\uff0c\u6267\u884c\uff1a</p> <pre><code>./pde2d_client your_input_filename.json\n</code></pre>"},{"location":"input/#_2","title":"\u8f93\u5165\u6587\u4ef6\u8bf4\u660e","text":"\u6a21\u5757/\u5b57\u6bb5 \u542b\u4e49 problem \u95ee\u9898\u5b9a\u4e49\u76f8\u5173\u53c2\u6570 <code>f_expr</code> \u53f3\u7aef\u9879 \\(f(x,y)\\) \u7684\u89e3\u6790\u8868\u8fbe\u5f0f\uff0c\u5982 <code>sin(pi*x) * sin(pi*y)</code> <code>dfdu_expr</code> \u975e\u7ebf\u6027\u9879\u5bf9\u672a\u77e5\u91cf \\(u\\) \u7684\u5bfc\u6570\u8868\u8fbe\u5f0f\uff1b\u82e5\u4e3a\u7ebf\u6027\u95ee\u9898\u53ef\u8bbe\u4e3a <code>\"0\"</code> mesh \u7f51\u683c\u4e0e\u533a\u57df\u53c2\u6570 <code>type</code> \u7f51\u683c\u7c7b\u578b\uff0c\u76ee\u524d\u53ea\u63d0\u4f9b\u77e9\u5f62\uff08rectangular\uff09\u548c\u4e09\u89d2\u5f62\uff08triangular\uff09 <code>nx</code> \u7f51\u683c\u5728 \\(x\\) \u65b9\u5411\u7684\u5256\u5206\u6570\uff08\u5355\u5143\u6570\uff09 <code>ny</code> \u7f51\u683c\u5728 \\(y\\) \u65b9\u5411\u7684\u5256\u5206\u6570 <code>Lx</code> \u533a\u57df\u5728 \\(x\\) \u65b9\u5411\u7684\u957f\u5ea6 <code>Ly</code> \u533a\u57df\u5728 \\(y\\) \u65b9\u5411\u7684\u957f\u5ea6 boundary \u8fb9\u754c\u6761\u4ef6\u8bbe\u7f6e <code>type</code> \u8fb9\u754c\u6761\u4ef6\u7c7b\u578b\uff0c\u8fd9\u91cc\u4e3a <code>\"dirichlet\"</code>\uff08\u72c4\u5229\u514b\u96f7\u8fb9\u754c\uff0c\u6307\u5b9a\u51fd\u6570\u503c\uff09 <code>left</code> \u5de6\u8fb9\u754c \\(x=0\\) \u7684\u8fb9\u754c\u503c\u8868\u8fbe\u5f0f <code>right</code> \u53f3\u8fb9\u754c \\(x=L_x\\) \u7684\u8fb9\u754c\u503c\u8868\u8fbe\u5f0f <code>bottom</code> \u4e0b\u8fb9\u754c \\(y=0\\) \u7684\u8fb9\u754c\u503c\u8868\u8fbe\u5f0f <code>top</code> \u4e0a\u8fb9\u754c \\(y=L_y\\) \u7684\u8fb9\u754c\u503c\u8868\u8fbe\u5f0f newton \u725b\u987f\u8fed\u4ee3\u6c42\u89e3\u76f8\u5173\u53c2\u6570 <code>max_iter</code> \u6700\u5927\u8fed\u4ee3\u6b21\u6570 <code>tol_R</code> \u6b8b\u5dee \\(R\\) \u7684\u6536\u655b\u9608\u503c <code>tol_rel_du</code> \u76f8\u5bf9\u589e\u91cf \\(\\Delta u / u\\) \u7684\u6536\u655b\u9608\u503c initial_condition \u521d\u59cb\u731c\u6d4b\u89e3\u7684\u8868\u8fbe\u5f0f\uff0c\u5982 <code>\"sin(2*pi*x) * sin(2*pi*y)\"</code>\uff0c\u7528\u4e8e\u8fed\u4ee3\u521d\u503c <p>\u8f93\u5165\u6587\u4ef6\u793a\u4f8b\uff08json\uff09\uff1a <pre><code>{\n    \"problem\": {\n      \"f_expr\": \"sin(pi*x) * sin(pi*y)\",\n      \"dfdu_expr\": \"0\"\n    },\n    \"mesh\": {\n      \"type\": \"rectangular\",\n      \"nx\": 16,\n      \"nx\": 16,\n      \"ny\": 16,\n      \"Lx\": 1.0,\n      \"Ly\": 1.0\n    },\n    \"boundary\": {\n      \"type\": \"dirichlet\",\n      \"left\":   \"0\",  \n      \"right\":  \"0\", \n      \"bottom\": \"0\",        \n      \"top\":    \"1\"       \n    },\n    \"newton\": {\n      \"max_iter\": 50,\n      \"tol_R\": 1e-10,\n      \"tol_rel_du\": 1e-8\n    },\n    \"initial_condition\": \"sin(2*pi*x) * sin(2*pi*y)\" \n}\n</code></pre></p>"},{"location":"install/","title":"\u5b89\u88c5\u8bf4\u660e","text":""},{"location":"install/#_2","title":"\u73af\u5883","text":"<p>\u8bf7\u786e\u4fdd\u73af\u5883\u5df2\u5b89\u88c5\u4ee5\u4e0b\u9879\u76ee\uff1a</p> <ul> <li>CMake \u2265 3.16  </li> <li>C++ \u7f16\u8bd1\u5668 (\u652f\u6301 C++17\uff0c\u5982 <code>g++-9+</code>, <code>clang++-10+</code>, \u6216 MSVC 2019+)  </li> <li>Eigen3 (\u5934\u6587\u4ef6\u5e93)  </li> <li>Boost \u2265 1.70 (\u4ec5\u9700 <code>boost::math</code>)  </li> <li>ExprTk (\u5df2\u5728 <code>third_party/</code> \u4e2d\u63d0\u4f9b\u5934\u6587\u4ef6)  </li> </ul> <p>\u5728 Ubuntu \u4e0a\uff1a</p> <pre><code>sudo apt-get update\nsudo apt-get install g++ cmake libeigen3-dev libboost-all-dev\n</code></pre> <p>\u5728 mac \u4e0a\uff1a</p> <pre><code>brew install cmake eigen boost\n</code></pre>"},{"location":"install/#_3","title":"\u6784\u5efa","text":"<p>\u5728\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u6267\u884c\uff1a</p> <pre><code>mkdir build\ncd build\ncmake ..\ncmake --build .\n</code></pre> <p>\u6784\u5efa\u5b8c\u6210\u540e\u4f1a\u751f\u6210\uff1a</p> <ul> <li> <p>\u5e93\u6587\u4ef6\uff1alibpde2d.a \u6216 libpde2d.dylib</p> </li> <li> <p>\u5ba2\u6237\u7aef\u7a0b\u5e8f\uff1apde2d_client</p> </li> <li> <p>\u6d4b\u8bd5\u7a0b\u5e8f (\u53ef\u9009)\uff1atest_basic</p> </li> </ul>"},{"location":"install/#_4","title":"\u8fd0\u884c","text":"<p>\u793a\u4f8b\u8f93\u5165\u6587\u4ef6\u5df2\u653e\u5728 <code>data/example_input.json</code>\uff0cCMake \u4f1a\u81ea\u52a8\u590d\u5236\u5230 <code>build/input/</code> \u4e0b\u3002</p> <p>\u5728 <code>build/</code> \u76ee\u5f55\u4e2d\u8fd0\u884c\u547d\u4ee4\uff1a</p> <pre><code>./pde2d_client example_input.json\n</code></pre> <p>\u7a0b\u5e8f\u4f1a\u6267\u884c\u4ee5\u4e0b\u6b65\u9aa4\uff1a</p> <ol> <li>\u8bfb\u53d6 <code>input/example_input.json</code> \u914d\u7f6e  </li> <li>\u6784\u5efa\u7f51\u683c\u4e0e PDE  </li> <li>\u6267\u884c Newton \u8fed\u4ee3\u6c42\u89e3  </li> <li>\u5c06\u7ed3\u679c\u8f93\u51fa\u5230 <code>output/example_input_u_matrix.csv</code></li> </ol>"},{"location":"install/#_5","title":"\u6d4b\u8bd5","text":"<p>\u6784\u5efa\u65f6\u4f1a\u751f\u6210\u7b80\u5355\u7684\u5355\u5143\u6d4b\u8bd5\uff0c\u8fd0\u884c\uff1a</p> <p><pre><code>ctest -V\n</code></pre> \u53ef\u4ee5\u770b\u5230 test_basic \u7684\u6267\u884c\u7ed3\u679c\u3002</p>"},{"location":"ofd_note/","title":"C++ \u6cca\u677e\u65b9\u7a0b\u6c42\u89e3\u5668","text":""},{"location":"ofd_note/#1","title":"1. \u6570\u5b66\u80cc\u666f","text":"<p>\u672c\u8282\u5c55\u793a\u6cca\u677e\u65b9\u7a0b\u7684\u6570\u5b66\u5f62\u5f0f\uff0c\u5305\u62ec\u5f31\u5f62\u5f0f\u3001\u79bb\u6563\u5316\u4ee5\u53ca\u725b\u987f\u8fed\u4ee3\u65b9\u6cd5\u3002</p>"},{"location":"ofd_note/#11","title":"1.1 \u7b26\u53f7\u8bf4\u660e","text":"\u7c7b\u578b \u5b57\u4f53\u683c\u5f0f \u793a\u4f8b \u51fd\u6570 / \u53c2\u6570 / \u4e0b\u6807 \u5c0f\u5199\u5b57\u6bcd \\(a\\) \u77e9\u9635 \u82b1\u4f53\u5b57\u6bcd \\(\\mathcal{A}\\) \u77e9\u9635/\u5411\u91cf\u7684\u5143\u7d20 \u5e26\u4e0b\u6807\u7684\u5b57\u6bcd \\(a_i\\), \\(A_{ij}\\) \u5411\u91cf \u5927\u5199\u7c97\u4f53\u5b57\u6bcd \\(\\mathbf{A}\\)"},{"location":"ofd_note/#12","title":"1.2 \u6cca\u677e\u65b9\u7a0b","text":"<p>\u6cca\u677e\u65b9\u7a0b\u7684\u4e00\u822c\u5f62\u5f0f\u4e3a\uff1a</p> \\[ \\nabla\\cdot(\\nabla u)=f,\\quad \\text{\u5728}\\quad \\Omega, \\] <p>\u5176\u4e2d \\(u\\) \u548c \\(f\\) \u662f\u5b9a\u4e49\u5728\u6d41\u5f62 \\(\\Omega\\) \u4e0a\u7684\u51fd\u6570\u3002</p>"},{"location":"ofd_note/#13","title":"1.3 \u5f31\u5f62\u5f0f","text":"<p>\u5f3a\u5f62\u5f0f\u8981\u6c42 \\(u\\) \u5728\u533a\u57df \\(\\Omega\\) \u5185\u9010\u70b9\u6ee1\u8db3 PDE\u3002 \u5728\u6570\u503c PDE \u4e2d\uff0c\u901a\u5e38\u91c7\u7528\u5f31\u5f62\u5f0f\u6765\u653e\u5bbd\u5bf9\u89e3\u7684\u5149\u6ed1\u6027\u8981\u6c42\uff1a</p> \\[ \\int_\\Omega \\nabla\\cdot(\\nabla u)\\,\\nu \\, d\\Omega = \\int_\\Omega f\\nu \\, d\\Omega, \\] <p>\u5176\u4e2d \\(\\nu\\) \u662f\u6d4b\u8bd5\u51fd\u6570\uff0c\u8981\u6c42 \\(\\nu\\) \u53ca \\(\\nabla \\nu\\) \u5728 \\(\\Omega\\) \u4e0a\u5e73\u65b9\u53ef\u79ef\u3002</p> <p>\u901a\u8fc7\u5206\u90e8\u79ef\u5206\uff0c\u5f31\u5f62\u5f0f\u53d8\u4e3a\uff1a</p> \\[ -\\int_\\Omega \\nabla\\nu \\cdot \\nabla u \\, d\\Omega + \\int_{\\partial\\Omega} (n\\cdot \\nabla u)\\nu \\, dS = \\int_\\Omega f\\nu \\, d\\Omega. \\] <p>\u82e5\u6d4b\u8bd5\u51fd\u6570 \\(\\nu\\) \u5728\u8fb9\u754c \\(\\partial \\Omega\\) \u4e0a\u4e3a\u96f6\uff0c\u5219\u8fb9\u754c\u9879\u6d88\u5931\uff0c\u5f97\u5230\uff1a</p> \\[ -\\int_\\Omega \\nabla\\nu \\cdot \\nabla u \\, d\\Omega = \\int_\\Omega f\\nu \\, d\\Omega,\\quad \\nu=0 \\;\\;\\text{\u5728}\\;\\;\\partial\\Omega. \\]"},{"location":"ofd_note/#14-galerkin","title":"1.4 Galerkin \u65b9\u6cd5","text":"<p>\u5f31\u5f62\u5f0f\u8981\u6c42\u79ef\u5206\u5bf9 Hilbert \u7a7a\u95f4 \\(V\\) \u4e2d\u4efb\u610f\u6d4b\u8bd5\u51fd\u6570\u6210\u7acb\u3002\u4f46 \\(V\\) \u662f\u65e0\u9650\u7ef4\u7684\u3002 Galerkin \u65b9\u6cd5\u9009\u62e9\u4e00\u4e2a\u6709\u9650\u7ef4\u5b50\u7a7a\u95f4 \\(V_n \\subset V\\)\uff0c\u4f7f\u6d4b\u8bd5\u51fd\u6570\u843d\u5728\u5176\u4e2d\u3002\u5f31\u5f62\u5f0f\u5199\u4f5c\uff1a</p> \\[ \\text{\u5bfb\u627e}\\; U_n\\in V_n,\\;\\; \\text{\u4f7f\u5f97}\\;\\forall\\nu\\in V_n:\\;\\; -\\int_\\Omega \\nabla\\nu \\cdot \\nabla U_n \\, d\\Omega = \\int_\\Omega f\\nu \\, d\\Omega \\] <p>\u8bbe \\(\\{e_1, e_2, ..., e_n\\}\\) \u662f \\(V_n\\) \u7684\u4e00\u7ec4\u57fa\u51fd\u6570\uff0c\u95ee\u9898\u53ef\u5199\u6210\uff1a</p> \\[ \\forall i\\in [1,2,...,n],\\quad -\\int_\\Omega \\nabla e_i \\cdot \\nabla U_n \\, d\\Omega = \\int_\\Omega f e_i \\, d\\Omega \\] <p>\u5c06 \\(U_n\\) \u5c55\u5f00\u4e3a\uff1a</p> \\[ U_n=\\sum_i u_i e_i \\] <p>\u4ee3\u5165\u540e\u5f97\u5230\u77e9\u9635\u5f62\u5f0f\uff1a</p> \\[ \\mathcal{A}U=\\mathcal{F} \\] <p>\u5176\u4e2d\uff1a</p> \\[ \\mathcal{A}=\\left(     \\begin{matrix} A_{11} &amp; A_{12} &amp; ... &amp; A_{1n} \\\\ &amp;  &amp; ... &amp; \\\\ A_{n1} &amp; A_{n2} &amp; ... &amp; A_{nn} \\end{matrix} \\right),\\quad A_{ij}=- \\int_\\Omega \\nabla e_i \\cdot \\nabla e_j \\, d\\Omega \\] \\[ U=[u_1,u_2,...,u_n]^T \\] \\[ f=[f_1,f_2,..,f_n]^T,\\quad f_i=\\int_\\Omega f e_i \\, d\\Omega \\]"},{"location":"ofd_note/#15","title":"1.5 \u725b\u987f\u8fed\u4ee3\u6cd5","text":"<p>\u725b\u987f\u6cd5\u7528\u4e8e\u6c42\u89e3\u975e\u7ebf\u6027 PDE\uff08\u5373 \\(f\\) \u4e0e \\(u\\) \u6709\u5173\uff09\u3002  </p> <p>\u6b8b\u5dee\u5411\u91cf \\(\\mathbf{R}\\) \u5b9a\u4e49\u4e3a\uff1a</p> \\[ R_i=-\\sum_j u_j \\int_\\Omega \\nabla e_i \\cdot \\nabla e_j \\, d\\Omega - \\int_\\Omega f e_i \\, d\\Omega, \\] <p>\u96c5\u53ef\u6bd4\u77e9\u9635 \\(\\mathcal{K}\\) \u5b9a\u4e49\u4e3a\uff1a</p> \\[ K_{ij}=\\frac{\\partial R_i}{\\partial u_j}=-\\int_\\Omega \\nabla e_i \\cdot \\nabla e_j \\, d\\Omega - \\int_\\Omega f'(u) e_i e_j \\, d\\Omega. \\] <p>\u725b\u987f\u8fed\u4ee3\u6b65\u9aa4\u4e3a\uff1a</p> \\[ U_{n+1}=U_n - \\frac{R(u)}{R'(u)} \\] <p>\u77e9\u9635\u5f62\u5f0f\u4e3a\uff1a</p> \\[ \\mathcal{K}\\,\\delta \\mathbf{U} = -\\mathbf{R}. \\] <p>\u539f\u6587\u6863\u4e2d\uff0c1.5\u548c1.6\u7684\u5f62\u5f0f\u4e3a\uff1a</p> Fig 1. \u539f\u6587\u6863\u4e2d\u76841.5\u548c1.6\u5f0f <p>\u5982\u679c\u5c06\u57fa\u51fd\u6570\u66ff\u6362\u4e3a\u5f62\u51fd\u6570\uff0c\u53ef\u4ee5\u770b\u51fa\\(\\mathcal{K}\\)\u53d8\u4e3a\u6709\u9650\u5143\u7684\u5355\u5143\u521a\u5ea6\u77e9\u9635\\(k^{(e)}\\)\uff1b\\(-\\mathbf{R}\\)\u53d8\u4e3a\u6709\u9650\u5143\u7684\u8377\u8f7d\u5411\u91cf\\(f^{(e)}\\)\u3002</p>"},{"location":"ofd_note/#2","title":"2. \u5355\u5143\u9879\u7684\u8ba1\u7b97","text":""},{"location":"ofd_note/#21","title":"2.1 \u5f62\u51fd\u6570\u4e0e\u68af\u5ea6","text":"<p>\u5728\u53c2\u8003\u5355\u5143 \\((\\xi, \\eta)\\) \u4e0a\u5b9a\u4e49\u5f62\u51fd\u6570\uff1a</p> <ul> <li>\u4e09\u89d2\u5f62\u5355\u5143\uff1a\u7ebf\u6027\u5f62\u51fd\u6570</li> </ul> \\[ N_1 = 1 - \\xi - \\eta,\\quad N_2 = \\xi,\\quad N_3 = \\eta \\] <ul> <li>\u56db\u8fb9\u5f62\u5355\u5143\uff1a\u53cc\u7ebf\u6027\u5f62\u51fd\u6570</li> </ul> \\[ N_1 = \\tfrac{1}{4}(1-\\xi)(1-\\eta),\\quad N_2 = \\tfrac{1}{4}(1+\\xi)(1-\\eta),\\dots \\] <p>\u540c\u65f6\u8ba1\u7b97\u5176\u5bf9\u5c40\u90e8\u5750\u6807\u7684\u5bfc\u6570 \\(\\partial N_i / \\partial \\xi, \\partial N_i / \\partial \\eta\\)\u3002</p>"},{"location":"ofd_note/#22","title":"2.2 \u5750\u6807\u53d8\u6362\u4e0e\u96c5\u53ef\u6bd4\u77e9\u9635","text":"<p>\u901a\u8fc7\u96c5\u53ef\u6bd4\u77e9\u9635 \\(\\mathcal{K}\\) \u5c06\u53c2\u8003\u5355\u5143\u79ef\u5206\u53d8\u6362\u5230\u7269\u7406\u5355\u5143\uff1a</p> \\[ \\nabla N_i = \\mathcal{K}^{-1} \\begin{bmatrix} \\partial N_i / \\partial \\xi \\\\ \\partial N_i / \\partial \\eta \\end{bmatrix}, \\qquad d\\Omega = \\det(\\mathcal{K}) \\, d\\xi d\\eta \\]"},{"location":"ofd_note/#23","title":"2.3 \u6570\u503c\u79ef\u5206\uff08\u9ad8\u65af\u79ef\u5206\uff09","text":"<p>\u5c06\u79ef\u5206\u79bb\u6563\u4e3a\u9ad8\u65af\u70b9\u6c42\u548c\uff0c\u4f8b\u5982\u4e09\u9636\u9ad8\u65af\u79ef\u5206\uff1a</p> \\[ \\int_{\\Omega_e} g(x,y) \\, d\\Omega \\;\\;\\approx\\;\\; \\sum_{q=1}^{n_q} g(x_q, y_q) \\, w_q \\, |\\det(\\mathcal{K})| \\] <p>\u5176\u4e2d \\((x_q,y_q)\\) \u4e3a\u79ef\u5206\u70b9\u5750\u6807\uff0c\\(w_q\\) \u4e3a\u6743\u91cd\u3002</p>"},{"location":"ofd_note/#24","title":"2.4 \u7ec4\u88c5\u5355\u5143\u77e9\u9635\u4e0e\u5411\u91cf","text":"<p>\u5728\u6bcf\u4e2a\u79ef\u5206\u70b9\uff0c\u8ba1\u7b97\uff1a</p> <ul> <li> <p>\u63d2\u503c\u89e3 \\(u(x_q,y_q)\\)\uff1b</p> </li> <li> <p>\u6e90\u9879 \\(f(u,x_q,y_q)\\)\uff1b</p> </li> <li> <p>\u68af\u5ea6\u9879 \\(\\nabla N_i \\cdot \\nabla N_j\\)\uff1b</p> </li> <li> <p>\u5e76\u7d2f\u52a0\u5230 <code>Ke</code> \u548c <code>Fe</code>\u3002</p> </li> </ul> <p>\u4f2a\u4ee3\u7801\u793a\u610f\uff1a</p> <pre><code>Ke(k,l) += (grad_phi(k) \u00b7 grad_phi(l) - Ni*Nj * dfdu_q) * weight;\nFe(k)   += (grad_phi(k) \u00b7 grad_uq - f_q * Ni) * weight;\n</code></pre> <p>\u7a0b\u5e8f\u5bf9\u5e94\u5173\u7cfb</p> \u6570\u5b66\u7b26\u53f7 \u7a0b\u5e8f\u53d8\u91cf \u542b\u4e49 \\(k^{(e)}\\) <code>Ke</code> \u5355\u5143\u521a\u5ea6\u77e9\u9635 \\(f^{(e)}\\) <code>Fe</code> \u5355\u5143\u6b8b\u5dee/\u8f7d\u8377\u5411\u91cf \\(\\mathbf{R}\\) <code>R</code> \u5168\u5c40\u6b8b\u5dee\u5411\u91cf\uff08\u7531\u6240\u6709 <code>Fe</code> \u88c5\u914d\uff09 \\(\\mathcal{K}\\) <code>K</code> \u5168\u5c40\u96c5\u53ef\u6bd4\u77e9\u9635\uff08\u7531\u6240\u6709 <code>Ke</code> \u88c5\u914d\uff09"},{"location":"ofd_note/#3","title":"3. \u5355\u5143\u53e0\u52a0\u5230\u5168\u5c40\u7cfb\u7edf\u7684\u7b97\u6cd5\u8bf4\u660e","text":"<p>\u5355\u5143\u521a\u5ea6\u77e9\u9635 \\(k^{(e)}\\) \u548c\u5355\u5143\u6b8b\u5dee\u5411\u91cf \\(f^{(e)}\\) \u4ec5\u5bf9\u5e94\u4e00\u4e2a\u5c40\u90e8\u5355\u5143\u3002\u4e3a\u4e86\u5f97\u5230\u6574\u4f53\u95ee\u9898\u7684\u5168\u5c40\u65b9\u7a0b\uff0c\u9700\u8981\u5c06\u6240\u6709\u5355\u5143\u7684\u8d21\u732e\u88c5\u914d\u5230\u5168\u5c40\u96c5\u53ef\u6bd4\u77e9\u9635 \\(K\\) \u548c\u5168\u5c40\u6b8b\u5dee\u5411\u91cf \\(R\\) \u4e2d\u3002  </p>"},{"location":"ofd_note/#31","title":"3.1 \u8282\u70b9\u7f16\u53f7\u6620\u5c04","text":"<p>\u6bcf\u4e2a\u5355\u5143\u7684\u81ea\u7531\u5ea6\uff08\u8282\u70b9\u7f16\u53f7\uff09\u662f\u5c40\u90e8\u7684\uff0c\u9700\u8981\u901a\u8fc7 \u8282\u70b9\u5168\u5c40 ID \u5efa\u7acb\u5355\u5143\u81ea\u7531\u5ea6\u4e0e\u5168\u5c40\u81ea\u7531\u5ea6\u7684\u5bf9\u5e94\u5173\u7cfb\u3002 \u8bb0\u5355\u5143\u8282\u70b9 ID \u4e3a \\(\\{I_1, I_2, \\dots, I_n\\}\\)\uff0c\u5219\u5728\u88c5\u914d\u65f6\u6709\uff1a</p> \\[ K(I_a, I_b) \\;+=\\; k^{(e)}_{ab},  \\qquad  R(I_a) \\;+=\\; f^{(e)}_{a} \\]"},{"location":"ofd_note/#32","title":"3.2 \u5168\u5c40\u77e9\u9635\u4e0e\u5411\u91cf\u66f4\u65b0","text":"<p>\u904d\u5386\u6240\u6709\u5355\u5143\uff0c\u5bf9\u5176\u5c40\u90e8\u77e9\u9635\u4e0e\u5411\u91cf\u4f9d\u6b21\u7d2f\u52a0\u5230\u5168\u5c40\u7cfb\u7edf\u4e2d\uff1a</p> <pre><code>for each element e:\n    ids = element.node_ids()   // \u5355\u5143\u7684\u5168\u5c40\u8282\u70b9\u7f16\u53f7\n    Ke, Fe = compute_element_matrices(e)\n    for a in ids:\n        R[a] += Fe[a]\n        for b in ids:\n            K[a,b] += Ke[a,b]\n</code></pre>"},{"location":"ofd_note/#4","title":"4. \u72c4\u5229\u514b\u96f7\u8fb9\u754c\u6761\u4ef6\u7684\u65bd\u52a0","text":"\\[ u(x,y) = g(x,y), \\quad (x,y) \\in \\Gamma_D \\] <p>\u5176\u4e2d \\(\\Gamma_D\\) \u8868\u793a\u72c4\u5229\u514b\u96f7\u8fb9\u754c\uff0c\\(g(x,y)\\) \u662f\u7ed9\u5b9a\u7684\u8fb9\u754c\u51fd\u6570\u3002</p> <p>\u5bf9\u4e8e\u8fb9\u754c\u4e0a\u7684\u67d0\u4e2a\u81ea\u7531\u5ea6 \\(i\\)\uff0c\u5176\u89e3\u503c\u5e94\u6ee1\u8db3\uff1a</p> \\[ u_i = g_i \\] <p>\u8fd9\u610f\u5473\u7740\u8be5\u81ea\u7531\u5ea6\u4e0d\u518d\u7531\u65b9\u7a0b\u7cfb\u7edf\u6c42\u89e3\uff0c\u800c\u662f\u88ab\u76f4\u63a5\u7ea6\u675f\u3002 \u56e0\u6b64\uff0c\u9700\u8981\u5728\u6570\u503c\u4ee3\u6570\u7cfb\u7edf\u4e2d\u201c\u6d88\u9664\u201d\u8be5\u672a\u77e5\u6570\u7684\u81ea\u7531\u5ea6\u3002</p>"},{"location":"ofd_note/#41","title":"4.1 \u4fee\u6539\u5168\u5c40\u77e9\u9635\u548c\u6b8b\u5dee","text":"<p>\u5e38\u7528\u7684\u72c4\u5229\u514b\u96f7\u8fb9\u754c\u6761\u4ef6\u65bd\u52a0\u65b9\u6cd5\u662f \u4fee\u6539\u5168\u5c40\u77e9\u9635\u548c\u6b8b\u5dee\uff1a</p> <ol> <li>\u6e05\u96f6\u77e9\u9635\u5bf9\u5e94\u7684\u884c\u548c\u5217 </li> </ol> <p>\u5bf9\u4e8e\u8fb9\u754c\u81ea\u7531\u5ea6 \\(i\\)\uff0c\u5c06\u5168\u5c40\u96c5\u53ef\u6bd4\u77e9\u9635\u7684\u7b2c \\(i\\) \u884c\u548c\u7b2c \\(i\\) \u5217\u6e05\u96f6\uff0c\u53ea\u5728\u5bf9\u89d2\u7ebf\u4e0a\u4fdd\u7559 1\uff1a</p> <p>$$    K(i,:) = 0, \\quad K(:,i) = 0, \\quad K(i,i) = 1    $$ 2. \u4fee\u6539\u6b8b\u5dee\u5411\u91cf </p> <p>\u5c06\u6b8b\u5dee\u5411\u91cf\u5bf9\u5e94\u4f4d\u7f6e\u6539\u4e3a\uff1a</p> <p>$$    R(i) = u(i) - g_i    $$</p> <p>\u5176\u4e2d \\(u(i)\\) \u662f\u5f53\u524d\u8fed\u4ee3\u89e3\uff0c\\(g_i\\) \u662f\u8fb9\u754c\u503c\u3002\u8fd9\u6837\u4fdd\u8bc1\u8fed\u4ee3\u8fc7\u7a0b\u4e2d \\(u(i)\\) \u59cb\u7ec8\u6536\u655b\u5230\u8fb9\u754c\u51fd\u6570\u3002</p>"},{"location":"ofd_note/#42","title":"4.2 \u7a0b\u5e8f\u5b9e\u73b0\u903b\u8f91","text":"<p>\u5728\u4ee3\u7801\u4e2d\uff0c\u72c4\u5229\u514b\u96f7\u8fb9\u754c\u6761\u4ef6\u7684\u5904\u7406\u51fa\u73b0\u5728<code>assembleForIteration</code> \u4e2d\uff0c\u903b\u8f91\u5982\u4e0b\uff1a</p> <pre><code>for each node i:\n    if node(i) \u5728\u8fb9\u754c:\n        double ubc = gD(x,y);   // \u8fb9\u754c\u503c g(x,y)\n        // \u4fee\u6539\u5168\u5c40\u77e9\u9635\n        for j in all nodes:\n            K(i,j) = 0.0;\n            K(j,i) = 0.0;\n        K(i,i) = 1.0;\n        // \u4fee\u6539\u6b8b\u5dee\u5411\u91cf\n        R(i) = u(i) - ubc;\n</code></pre>"},{"location":"tutorial/","title":"Tutorial","text":""},{"location":"tutorial/#an-example-of-what-you-can-do-here","title":"An example of what you can do here:","text":""},{"location":"tutorial/#a-subsection","title":"A subsection","text":"<p>LaTeX: $$ \\begin{equation} \\int _{\\text{\u4e4c\u9f9f}}^{\\text{\u571f\u8c46}}\\text{\u8c10}=??? \\end{equation} $$</p> <p>Figure:</p> Fig 1. \u8c10. <p>Box:</p> <p>NNN</p> <p>NNN</p> <p>NNN</p> <p>NNN</p> <p>NNN</p> <p>NNN</p> CodeAnother Code <pre><code>import numpy as np\nimport diffraction as diff\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nimport time as time\nfrom matplotlib.widgets import Button\nimport scipy.io\nfrom matplotlib.widgets import RangeSlider\nimport scipy.ndimage as ndimage\n</code></pre> <pre><code>Hello World!!!\n</code></pre> <pre><code>classDiagram\n  Person &lt;|-- Student\n  Person &lt;|-- Professor\n  Person : +String name\n  Person : +String phoneNumber\n  Person : +String emailAddress\n  Person: +purchaseParkingPass()\n  Address \"1\" &lt;-- \"0..1\" Person:lives at\n  class Student{\n    +int studentNumber\n    +int averageMark\n    +isEligibleToEnrol()\n    +getSeminarsTaken()\n  }\n  class Professor{\n    +int salary\n  }\n  class Address{\n    +String street\n    +String city\n    +String state\n    +int postalCode\n    +String country\n    -validate()\n    +outputAsLabel()  \n  }</code></pre> <p>An example of program diagram:</p> <p><pre><code>stateDiagram-v2\n\n    CIF --&gt; POSCAR\n    POSCAR: POSCAR \n    POSCAR: Lattice Constants\n    POSCAR: Atom position\n    POSCAR --&gt; Bragg\n\n    Input1 --&gt; Bragg\n    Input1: Input\n    Input1: (hkl) dimensions\n    Input1: Rotation\n    Bragg: Bragg peak\n    Bragg: Bragg peak postitions in reciprocal space (3D)\n\n    Bragg --&gt; Intensity\n    Input2 --&gt; Intensity\n    Input2: Input\n    Input2: Peak Broadening parameters \n    Input2: 2D image grid\n    Intensity --&gt; 2d\n    2d: 2d image display</code></pre> An example of the table:</p> Method Description <code>GET</code>      Fetch resource <code>PUT</code>  Update resource <code>DELETE</code>      Delete resource <ol> <li> <p>Contributors to Wikimedia projects. F-divergence. In: Wikipedia [Internet]. 17 Jul 2021 [cited 6 Sep 2021]. Available: https://en.wikipedia.org/wiki/F-divergence#Instances_of_f-divergences \u21a9</p> </li> <li> <p>Nowozin S, Cseke B, Tomioka R. f-GAN: Training Generative Neural Samplers using Variational Divergence Minimization. arXiv [stat.ML]. 2016. Available: http://arxiv.org/abs/1606.00709 \u21a9</p> </li> <li> <p>Contributors to Wikimedia projects. Convex conjugate. In: Wikipedia [Internet]. 20 Feb 2021 [cited 7 Sep 2021]. Available: https://en.wikipedia.org/wiki/Convex_conjugate \u21a9</p> </li> </ol>"},{"location":"GIWAXS/GIWAXS%20Index%20tool/","title":"GIWAXS index tool in Python","text":"<p>Zihan Zhang (zihan.zhang-1@colorado.edu) &amp; Keith White (Keith.White@colorado.edu)</p> <p>This is a python code to show the Bragg peak position and the Miller index on a 2D image (q\\(_{xy}\\), q\\(_{z}\\)). The program is based on GIWAXS simulation tool. You need to download diffraction.py to use the functions.</p> <p>The Bragg peak position is calculated using cif file. They are labeled as (h k l) on the image and the experiment data is used as background for comparison.</p> Fig 1. This is the 2D image generated from the GIWAXS index tool. The background is simulation instead of experiment for illustration. The left row is not labeled because a cutoff of intensity is used to eliminate the peaks with low intensity. <p>To plot the Miller index and their positions, you will need Bragg_peaks functions to calculate the Bragg peaks first and then call Mindexing function to make the 2D figure. The code and the workflow are attached below.</p> LibraryDefine the 'Mindexing' functionParametersMain <pre><code>import numpy as np\nimport diffraction as diff\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nimport time as time\nfrom matplotlib.widgets import Button\nimport scipy.io\nfrom matplotlib.widgets import RangeSlider\nimport scipy.ndimage as ndimage\nimport matplotlib.patheffects as path_effects\n</code></pre> <pre><code>def Mindexing(data,colorbar,fsize,qrange,Mindexrange,I_miller,Cutoff_I,Mqxy,Mqz):\n    simuposi=np.zeros([100,2])\n    isimuposi=0\n    fig,ax=plt.subplots(figsize=fsize)\n    plt.imshow(data, interpolation='nearest', cmap=cm.jet,\n                   origin='lower', extent=qrange,\n                   vmax=colorbar*data.max(), vmin=data.min())\n    plt.xlabel('q$_{xy}$(1/A)',fontsize=16)\n    plt.ylabel('q$_{z}$(1/A)',fontsize=16)\n\n    MaxI=0\n    for h in Mindexrange:\n        for k in Mindexrange:\n            for l in Mindexrange:\n                if Mqxy[h,k,l]&lt;qxymax and Mqz[h,k,l]&gt;qzmin and Mqz[h,k,l]&lt;qzmax:\n                    MaxI=np.maximum(I_miller[h,k,l],MaxI)\n\n    for h in Mindexrange:\n        for k in Mindexrange:\n            for l in Mindexrange:\n                if Mqxy[h,k,l]&lt;qxymax and Mqz[h,k,l]&gt;qzmin and Mqz[h,k,l]&lt;qzmax:\n                    if I_miller[h,k,l]&gt;Cutoff_I*MaxI:\n                        plt.plot(Mqxy[h,k,l],Mqz[h,k,l], 'ko')\n                        simuposi[isimuposi,0]=Mqxy[h,k,l]\n                        simuposi[isimuposi,1]=Mqz[h,k,l]\n                        isimuposi=isimuposi+1\n                        textstr='('+str(h-hkl_dimension)+','+str(k-hkl_dimension)+','+str(-l+hkl_dimension)+')'\n                        millerplt=plt.text(Mqxy[h,k,l]/(2*qxymax)+0.5, (Mqz[h,k,l]-qzmin)/(qzmax-qzmin), textstr, \n                                 transform=ax.transAxes, fontsize=10,verticalalignment='top',color='w')\n                        millerplt.set_path_effects([path_effects.Stroke(linewidth=3, foreground='black'),\n                                    path_effects.Normal()])\n    return simuposi\n</code></pre> <pre><code>data = II1   # This is the background/experiment data.\ndata = np.log(II1+1)\ncolorbar=0.9\n\nfsize=(30,30) # You need a large figure to see the index.\nqrange=[-qxymax, qxymax, qzmin, qzmax] # This is the q range of your experiment data.\nMindexrange=np.linspace(0,hkl_dimension,hkl_dimension+1) # Only the left side of the image is labeled\nMindexrange=Mindexrange.astype('int')\n\nCutoff_I=0.001 # Set the cutoff to eliminate the low intensity peaks\n</code></pre> <pre><code>dirr = ''\nfilename = ''\naddress = dirr + filename +'.vasp'\nthetax=np.pi/2*0\nthetay=np.pi/2*0\nhkl_dimension=5\n\na1,a2,a3,positions=diff.read_poscar(address)\nBpeaks,Mqxy,Mqz,I_miller = diff.Bragg_peaks(a1,a2,a3,positions,thetax,thetay,hkl_dimension)\nsimuposi=Mindexing(data,colorbar,fsize,qrange,Mindexrange,I_miller,Cutoff_I,Mqxy,Mqz)\nprint(simuposi)\n</code></pre> <p>Workflow of this program: <pre><code>stateDiagram-v2\n\n    CIF --&gt; POSCAR\n    POSCAR: POSCAR \n    POSCAR: Lattice Constants\n    POSCAR: Atom position\n    POSCAR --&gt; Bragg\n\n    Input1 --&gt; Bragg\n    Input1: Input\n    Input1: (hkl) dimensions\n    Input1: Rotation\n    Bragg: Bragg peak\n    Bragg: Bragg peak postitions in reciprocal space (3D)\n\n    Bragg --&gt; Mindexing\n    Input2 --&gt; Mindexing\n    Input2: Input\n    Input2: Experiment data\n    Input2: Cutoff Intensity\n    Input2: figure size\n    Mindexing --&gt; 2d\n    2d: 2d image display</code></pre></p>"},{"location":"GIWAXS/GIWAXS%20Simulation/","title":"GIWAXS Simulation tool in Python","text":"<p>Zihan Zhang (zihan.zhang-1@colorado.edu)</p> <p>A program for 2D material diffraction simulation is introduced in this work. The sample is considered as crystallites with a Gaussian distribution in orientation in spherical coordinate (r,\\(\\theta\\),\\(\\phi\\)). The simulated diffraction pattern is in (q\\(_x\\), q\\(_{xy}\\)) plane which is designed to compare with WAXS(wide angle x-ray scattering) measurement. Thus Braggg peaks elongates in a ring pattern from their original positions in reciprocal space.</p> Fig 1. (a) Crystal structure of 2D perovskite; (b) GIWAXS data of PPA; (c) GIWAXS simulation of PPA."},{"location":"GIWAXS/GIWAXS%20Simulation/#diffraction-intensity","title":"Diffraction Intensity","text":"<p>In reciprocal space, the Gaussian distribution in crystallites orientation results in a rotation for each Bragg peak. If we consider using an area detector to measure the diffraction intensity in q\\(_z\\) q\\(_{x}\\) plane. It is a summation of all Bragg peaks with each of them has the same Gaussian width(\\(\\sigma_\\theta\\), \\(\\sigma_\\phi\\)) centered in (q\\(_x\\), q\\(_y\\), q\\(_z\\)):</p> \\[ \\begin{equation}     I(q_z,q_{x})=\\sum_{h,k,l}|\\sum_{i} f_i(\\mathbf{Q}) e^{i\\mathbf{Q}\\cdot\\mathbf{r}_n}|^2 e^{-\\frac{1}{2}\\frac{(\\theta^I-\\theta_0^B)^2}{\\sigma_\\theta^2}}e^{-\\frac{1}{2}\\frac{(\\phi^I-\\phi_0^B)^2}{\\sigma_\\phi^2}}e^{-\\frac{1}{2}\\frac{(q^I-q_0^B)^2}{\\sigma_q^2}} \\end{equation} \\] <p>where (\\(q^I\\), \\(\\theta^I\\), \\(\\phi^I\\)) is the position of image plane(q\\(_x\\), q\\(_z\\)) in spherical coordinate.</p> Fig 2. Spherical Coordinate \\[ \\begin{equation}     q=\\sqrt{q_z^2+q_{x}^2},\\quad \\theta=\\frac{\\pi}{2}-\\arctan\\frac{q_z}{|q_{x}|}, \\quad     \\phi=     \\left\\{     \\begin{array}{cc}         0, \\quad x&gt;0\\\\         \\pi,\\quad x&lt;0       \\end{array}     \\right. \\end{equation} \\] <p>\\(\\mathbf{Q}\\) is the position of Bragg peaks and (hkl) is Miller index. \\(n\\) indicate the atoms in the unit cell and r\\(_n\\) is the real space position of \\(n\\)th atom in the unit cell.</p> \\[ \\begin{equation}     \\mathbf{Q}=h\\mathbf{b}_1+k\\mathbf{b}_2+l\\mathbf{b}_3 \\end{equation} \\] <p>(\\(q_0^B\\), \\(\\theta_0^B\\), \\(\\phi_0^B\\)) is the position of Bragg peaks in reciprocal space converted to spherical coordinates:</p> \\[ \\begin{equation}     q_0^B=|\\mathbf{Q}|,\\quad\\theta_0^B=\\arctan\\frac{Q_z}{\\sqrt{Q_x^2+Q_y^2}},\\quad\\phi_0^B=\\arccos\\frac{Q_y}{\\sqrt{Q_x^2+Q_y^2}} \\end{equation} \\] <p>It should be noticed that this is a theoretical result in (q\\(_z\\),q\\(_x\\)) plane. Diffraction Ewald sphere is not considered here. Thus there is no 'missing wadge' as it always appears in GIWAXS. And a Gaussion profile in \\(\\hat{q}\\) direction is added to make a finite peak width in 2D image plane. In real materials the line shape in \\(\\hat{q}\\) is Lorentizian which depends on strain and crystallite size. </p>"},{"location":"GIWAXS/GIWAXS%20Simulation/#bragg-peaks","title":"Bragg Peaks","text":"<p>Although we aim at 2D material in this proposal, a 3D crystal structure is needed to calculate the Bragg peaks. If the position of atoms is described in 2D, we need to assume a lattice constant or d-spacing in z-direction. The single crystal Bragg peaks are calculated from crystal structure file(.cif, POSCAR et. al) where lattice parameters and the positions of atoms in real space are provided. </p> POSCAR File <pre><code>Sn2 O4\n1.0\n   4.7648180450000002    0.0000000000000000    0.0000000000000003\n   0.0000000000000008    4.7648180450000002    0.0000000000000003\n   0.0000000000000000    0.0000000000000000    3.2074997700000001\nSn O\n2 4\ndirect\n   0.5000000000000000    0.5000000000000000    0.5000000000000000 Sn4+\n   0.0000000000000000    0.0000000000000000    0.0000000000000000 Sn4+\n   0.8059722950000000    0.1940277050000000    0.5000000000000000 O2-\n   0.1940277050000000    0.8059722950000000    0.5000000000000000 O2-\n   0.3059722950000000    0.3059722950000001    0.0000000000000000 O2-\n   0.6940277050000000    0.6940277050000000    0.0000000000000000 O2-\n</code></pre> <p>The unit vector in real and reciprocal space are defined as:</p> \\[ \\begin{equation} \\begin{aligned}     \\mathbf{a}_1&amp;=(a,0,0),\\quad\\quad\\quad\\quad\\quad\\quad\\quad\\quad\\quad\\quad\\,\\,\\,\\,\\quad\\quad\\quad\\quad    \\mathbf{b}_1=\\frac{2\\pi}{V}\\mathbf{a}_2\\times\\mathbf{a}_3\\\\ \\mathbf{a}_2&amp;=(b\\cos\\gamma,b\\sin\\gamma,0),\\quad\\quad\\quad\\quad\\quad\\quad\\,\\,\\,\\quad\\quad\\quad\\quad\\mathbf{b}_2=\\frac{2\\pi}{V}\\mathbf{a}_3\\times\\mathbf{a}_1\\\\     \\mathbf{a}_3&amp;=(c\\cos\\beta,cn_2,c\\sqrt{\\sin^2\\beta+n_2^2}),\\quad\\quad\\quad\\quad\\quad\\quad\\mathbf{b}_3=\\frac{2\\pi}{V}\\mathbf{a}_1\\times\\mathbf{a}_2 \\end{aligned}     \\end{equation} \\] <p>where \\((a,b,c)\\) and \\((\\alpha,\\beta,\\gamma)\\) are lattice constants and angles of unit cell,</p> \\[ \\begin{equation}     n_2=\\frac{\\cos\\alpha-\\cos\\beta\\cos\\gamma}{\\sin\\gamma} \\end{equation} \\] \\[ \\begin{equation}     V= \\mathbf{a}_1\\cdot(\\mathbf{a}_2\\times\\mathbf{a}_3) \\end{equation} \\] <p>We also made a rotation matrix to help adjust the sample orientation if the it is not ideally given by in the crystal structure file:</p> \\[ \\begin{equation}     M=\\left(\\begin{array}{ccc}        \\mathbf{a}_1\\\\         \\mathbf{a}_2 \\\\         \\mathbf{a}_3     \\end{array}\\right)=\\left(\\begin{array}{ccc}         a &amp; 0 &amp; 0\\\\         b\\cos\\gamma &amp; b\\sin\\gamma &amp; 0 \\\\         c\\cos\\beta &amp; c n_2 &amp; c\\sqrt{\\sin^2\\beta+n_2^2}     \\end{array}\\right) \\end{equation} \\] \\[ \\begin{equation}     \\hat{q},\\,|\\mathbf{q}|,\\,\\Delta E \\end{equation} \\] \\[ \\begin{equation}     E=\\sqrt{m^2c^4+p^2c^2} \\end{equation} \\] \\[ \\begin{equation}     R_x(\\theta)=\\left(\\begin{array}{ccc}         1 &amp; 0 &amp; 0\\\\         0 &amp; \\cos\\theta &amp; -\\sin\\theta \\\\         0 &amp; \\sin\\theta &amp; \\cos\\theta     \\end{array}\\right),\\quad     R_y(\\theta)=\\left(\\begin{array}{ccc}         \\cos\\theta &amp; 0 &amp; -\\sin\\theta\\\\         0 &amp; 1 &amp; 0 \\\\         \\sin\\theta &amp; 0 &amp; \\cos\\theta     \\end{array}\\right) \\end{equation} \\] <p>Multiply Matrix M by \\(R_x(\\theta)\\) or \\(R_y(\\theta)\\) gives the rotated lattice vectors.</p> <p>Position of Bragg peaks with Miller index (hkl):</p> \\[ \\begin{equation}     \\mathbf{G}=h\\mathbf{b}_1+k\\mathbf{b}_2+l\\mathbf{b}_3 \\end{equation} \\] <p>Workflow of this program: <pre><code>stateDiagram-v2\n\n    CIF --&gt; POSCAR\n    POSCAR: POSCAR \n    POSCAR: Lattice Constants\n    POSCAR: Atom position\n    POSCAR --&gt; Bragg\n\n    Input1 --&gt; Bragg\n    Input1: Input\n    Input1: (hkl) dimensions\n    Input1: Rotation\n    Bragg: Bragg peak\n    Bragg: Bragg peak postitions in reciprocal space (3D)\n\n    Bragg --&gt; Intensity\n    Input2 --&gt; Intensity\n    Input2: Input\n    Input2: Peak Broadening parameters \n    Input2: 2D image grid\n    Intensity --&gt; 2d\n    2d: 2d image display</code></pre></p> <p>Download the source code.</p> CodeSet the parametersRead CIFSimulationPlot <pre><code>import numpy as np\nimport diffraction as diff\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nimport time as time\nfrom matplotlib.widgets import Button\nimport scipy.io\nfrom matplotlib.widgets import RangeSlider\nimport scipy.ndimage as ndimage\nimport matplotlib.patheffects as path_effects\n</code></pre> <pre><code># use thetax and thetay to adjust initial orientation of the sample\nthetax=np.pi/2*1\nthetay=np.pi/2*0\nhkl_dimension=10\n\n# sigma_theta, if you need a small number for single crystal, input~0.01, \n# if you need infinity, input~1000\nsigma1=0.02\n\n# sigma_phi\nsigma2=1000\n\n# sigma_r, use this to tune the peak linewidth\nsigma3=0.01\n\n# settings for imagine plane\nresolutionx=300\nqxymax=2.5\nqzmax=3\nqzmin=0\n\nresolutionz=int(resolutionx/qxymax*qzmax)\ngridx,gridz=np.meshgrid(np.linspace(-qxymax,qxymax,resolutionx),np.linspace(qzmin,qzmax,resolutionz))\n</code></pre> <pre><code># read crystal structure from POSCAR\n# POSCAR file which can be easily converted from cif on VESTA (fractional coordinate)\ndirr = ''\nfilename = 'MA2DMF2Pb3I8_Petrov2017'\naddress = dirr + filename +'.vasp'\na1,a2,a3,positions=diff.read_poscar(address) # example (graphite)\nBpeaks,Mqxy,Mqz,I_miller = diff.Braggg_peaks(a1,a2,a3,positions,thetax,thetay,hkl_dimension)\n</code></pre> <pre><code>t1_start = time.process_time()\n# calculated GIWAXS pattern\nIII=diff.intensity(gridx,gridz,Bpeaks,sigma1,sigma2,sigma3,hkl_dimension)\nt1_stop = time.process_time()\nprint('cpu time =')\nprint(t1_stop-t1_start,'s')\n</code></pre> <pre><code> # make the plot\ncolorbar=0.5   # upper limit\n\n# II1=np.log(III+1)\n\nII1=III\n\nfig,ax=plt.subplots(figsize=(14,14))\n\nplt.imshow(II1, interpolation='nearest', cmap=cm.jet,\n               origin='lower', extent=[-qxymax, qxymax, qzmin, qzmax],\n               vmax=colorbar*II1.max(), vmin=II1.min())\nax.set_xlabel('q$_{xy}$(1/A)',fontsize=16)\nax.set_ylabel('q$_{z}$(1/A)',fontsize=16)\nax.set_title(filename+' GIWAXS simulation',fontsize=16)\nfig.set_size_inches([17,10])\n</code></pre>"},{"location":"GIWAXS/GIWAXS%20image%20tool/","title":"GIWAXS image tool in Python","text":"<p>Zihan Zhang (zihan.zhang-1@colorado.edu)</p> <p>This is an example of the GIWAXS class in python.</p> <p>Import libraries, the GIWAXS class is included in GIWAXS.py.</p> Code <pre><code>import numpy as np\nimport pandas as pd\nimport math\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nimport scipy.io\nfrom scipy.optimize import curve_fit\nimport GIWAXS\nimport scipy.misc\nimport os\nfrom PIL import Image\nimport tifffile\n</code></pre> <p>Load experiment data (.tiff file) with the coordinate. And create a GIWAXS object by M=GIWAXS.GIWAXS(...).</p> CodeOutput <pre><code># read .tiff file\ndirr = \"\"\nfilename = \"test_qmap\"\npath=os.path.join(dirr,filename)\nf = tifffile.imread(path+'.tiff')\nGiwaxs_data=np.array(f)\n\nqzmax=np.max(np.loadtxt('test_qz.txt'))/10\nqzmin=np.min(np.loadtxt('test_qz.txt'))/10\nqxymax=np.max(np.loadtxt('test_qxy.txt'))/10\nqxymin=np.min(np.loadtxt('test_qxy.txt'))/10\nqz=[qzmin,qzmax]\nqxy=[qxymin,qxymax]\n\nM=GIWAXS.GIWAXS(Giwaxs_data,qxy,qz,'Example',dirr)\nM.switch_qxy()\nM.switch_qz()\nM.imshow()\nprint('qz=',qz)\nprint('qxy=',qxy)\n</code></pre> <p>qz= -1.8346400457410241 2.8658707336457097</p> <p>qxy= -2.4817527502473498 2.10232264951378 </p> <p>Then you can use cut() function to resize your GIWAXS image.</p> CodeOutput <pre><code>M.cut([0,2],[0,2])\nM.rename('image cut example')\nM.cut_imshow()\n</code></pre> <p></p> <p>peak_finder() can help you find the peaks in the cut image. Tune neighborhood_size and threshold to improve the performance. You can also print (q\\(_{xy}\\), q\\(_z\\)) and q by setting print_peak_position to True</p> CodeOutput <pre><code>neighborhood_size=30\nthreshold=30\nprint_peak_position=True\ncolorbar=0.1\nM.cut_imshow()\nM.peak_finder(neighborhood_size,threshold,print_peak_position)\n</code></pre> <p></p> <p>Qzint() integrate the selected area and gives the intensity vs q\\(_z\\). Qxyint() gives intensity vs q\\(_{xy}\\).</p> CodeOutput <pre><code>qxy1=[0.3,0.4]\nqz1=[0.2,0.4]\nM.rename('qzint example')\nM.qzint(qxy1,qz1)\nM.qzint_imshow()\n</code></pre> <p></p> <p>aglint() integrate the selected sector to get intensity vs q. qp defines the number of points in \\(q\\). A smooth option is also offered to convolute the curve. </p> CodeOutput <pre><code>angle=[-40,-25]\nqrange=[0.6,0.77]\n\nsmooth1=False\nqp=20\n\nM.aglint(angle,qrange,qp,smooth=smooth1,Nsmooth=10)\nq0,I0=M.aglint_imshow()\n</code></pre> <p></p>"},{"location":"GIWAXS/GIWAXS%20reverse%20problem/","title":"GIWAXS reverse problem","text":"<p>Zihan Zhang (zihan.zhang-1@colorado.edu)</p> <p>Reversed GIWAXS problem: derive the lattice parameters from the given GIWAXS pattern. </p> <p>A brute-force search program </p>"},{"location":"GIWAXS/GIWAXS%20reverse%20problem/#blue-print-of-the-program","title":"Blue print of the program","text":"<ul> <li> GIWAXS reverse problem<ul> <li> Input<ul> <li> Given peak positions (In the first quadrant only)</li> <li> A guess of \\(\\vec{G}\\)</li> </ul> </li> <li> DOF analysis<ul> <li> Original 9 degrees of freedom </li> <li> [\\(a^*_x\\),\\(a^*_y\\),\\(a^*_z\\)] [\\(b^*_x\\),\\(b^*_y\\),\\(b^*_z\\)] [\\(c^*_x\\),\\(c^*_y\\),\\(c^*_z\\)]</li> <li> Force \\(\\vec{a}^*\\) to be in [\\(a_x^*\\),0,\\(a_z^*\\)] direction (kills 1 degrees of freedom (DOF=8))</li> <li> Find the peak that is nearest to [0,0,0] (gives \\(a_x^*\\) and \\(a_z^*\\), (DOF=6))</li> <li> Remove peaks \\(\\vec{a}^*\\), \\(2\\vec{a}^*\\), \\(3\\vec{a}^*\\), ...</li> <li> Find the next nearest peak (gives [\\(b_{xy}^*\\),\\(b_z^*\\)] and kills 2 DOF (DOF=4))</li> </ul> </li> <li> Algorithm<ul> <li> Monte Carlo (good for high dimensions), Markov chain (Brute-force search. This is a ill-conditioned problem with a lot of local minimums.)</li> <li> Cost function: add up the distance of each given peak to the nearest simulated peak. add up the distance of each simulated peak to the nearest given peak. (make sure every peak find their friend)</li> </ul> </li> <li> Optimization<ul> <li> use gradient decent after MT to boost the convergence</li> <li> convert the output lattice parameter to a high symmetry format</li> </ul> </li> </ul> </li> </ul> <p>Import libraries</p> Code <pre><code>import numpy as np\nimport scipy.ndimage as ndimage\nimport diffraction as diff\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nimport time as time\nfrom matplotlib.widgets import Button\nimport scipy.io\nfrom matplotlib.widgets import RangeSlider\nimport matplotlib.patheffects as path_effects\n</code></pre> <p>Input</p> CodeFunctions <pre><code>qxy_exp=[0,4]\nqz_exp=[0,4]\nBragg_peaks_exp=[\n    [0,1],\n    [0,2],\n    [0,3],\n    [2,0],\n    [2,1],\n    [2,2],\n    [2,3],\n    [2.818,0],\n    [2.818,1],\n    [2.818,2],\n    [2.818,3],\n    [1.414,0.5],\n    [1.414,1.5],\n    [1.414,2.5],\n    [3.16,0.5],\n    [3.16,1.5],\n    [3.16,2.5],\n    [4.24,0.5],\n    [4.24,1.5],\n    [4.24,2.5],\n    [4,0],\n    [4,1],\n    [4,2],\n    [4,3]\n]\nhkl=5\n</code></pre> <pre><code>def make_cif(Bragg_peaks):\n    # b1=[np.random.uniform(-ub, ub),0,np.random.uniform(-ub, ub)]\n    b2x=np.random.uniform(-1.5, 1.5)\n    b3x=np.random.uniform(-5, 5)\n    b3y=np.random.uniform(-5, 5)\n    b3z=np.random.uniform(-5, 5)\n    b1=[0,0,1]\n    b2=[b2x,np.sqrt(2.25-b2x*b2x),0.5]\n    b3=[b3x,b3y,b3z]\n    return b1,b2,b3\n\ndef find_c(array):\n    x_values_with_leading_zero = [pair[1] for pair in array if pair[0] == 0]\n    if not x_values_with_leading_zero:\n        return None\n    return min(x_values_with_leading_zero)\n\ndef closest_distance(array, point):\n    # Convert the input to numpy arrays if they aren't already\n    array = np.array(array)\n    point = np.array(point)\n\n    # Compute squared distances\n    squared_distances = np.sum((array - point)**2, axis=1)\n\n    # Find the minimum squared distance and take its square root to get the actual distance\n    min_distance = np.sqrt(np.min(squared_distances))\n\n    return min_distance\n\ndef Bragg_peaks(b1,b2,b3,hkl_dimension):\n    # grid for Miller index\n    i=np.linspace(-hkl_dimension,hkl_dimension,2*hkl_dimension+1)\n    H,K,L=np.meshgrid(i,i,i)\n\n    # The position of Bragg peaks in reciprocal space\n    G1=H*b1[0]+K*b2[0]+L*b3[0]\n    G2=H*b1[1]+K*b2[1]+L*b3[1]\n    G3=H*b1[2]+K*b2[2]+L*b3[2]\n\n    q2=G1*G1+G2*G2+G3*G3\n    F=1\n    Bpeaks=np.concatenate((G1,G2,G3), axis=0)\n    # return Bpeaks,pow(G1*G1+G2*G2,0.5),pow(G3*G3,0.5)\n    return pow(G1*G1+G2*G2,0.5),pow(G3*G3,0.5)\n\ndef FT(a1,a2,a3):\n    # Lattice parameters M matrix in cartesian coordinate(angstrom)\n    M=[a1,a2,a3]\n    M=np.asarray(M)\n\n    # New lattice parameter\n    aa1=M[0,:]\n    aa2=M[1,:]\n    aa3=M[2,:]\n\n    # reciprocal lattice\n    volume=np.matmul(aa3,np.cross(aa1,aa2))\n    b1=2*np.pi*np.cross(aa2,aa3)/volume\n    b2=2*np.pi*np.cross(aa3,aa1)/volume\n    b3=2*np.pi*np.cross(aa1,aa2)/volume\n    print(b1,b2,b3)\n</code></pre> <p>Main </p> Code <pre><code>total_distance0=99999999\nfor i in range(500000):\n    b1,b2,b3=make_cif(Bragg_peaks_exp)\n    qxy,qz=Bragg_peaks(b1,b2,b3,hkl)\n    qxy=qxy.ravel()\n    qz=qz.ravel()\n    combined = np.column_stack((qxy, qz))\n    j=0\n    total_distance=0\n    for ii in Bragg_peaks_exp:\n        total_distance=total_distance+closest_distance(combined,Bragg_peaks_exp[j])\n        j=j+1\n    j1=0\n    for ii in combined:\n        if combined[j1,0]&lt;qxy_exp[1]:\n            if combined[j1,1]&lt;qz_exp[1]:\n                total_distance=total_distance+closest_distance(Bragg_peaks_exp,combined[j1])\n        j1=j1+1\n    if total_distance&lt;total_distance0:\n        total_distance0=total_distance\n        FT(b1,b2,b3)\n</code></pre> <p>Performance:</p> <p>The result from a test on PC. (~ 25 miniutes cpu time)</p> Lattice parameter <pre><code>[ 1.09233506 -2.95321592  6.28318531] \n[-2.18850426  5.89804628  0.        ] \n[-1.84097256 -4.0263532   0.        ]\n\n## rotate this lattice and re-define lattice parameters to make it symmetric, you'll get\n\na = [-pi, pi, 0]\nb = [-pi,-pi, 0]\nc = [pi, 0, 2pi]\n</code></pre> Fig 1. (a) The reverse problem (b) Simulation using the lattice parameter found by the program."},{"location":"GIWAXS/GIWAXS/","title":"GIWAXS experiment","text":""},{"location":"GIWAXS/intro/","title":"Introduction to GIWAXS","text":""},{"location":"GIWAXS/pyWAXS/","title":"pyWAXS","text":"<p>See Instruction.</p> <p>This is a test!</p> <ul> <li> GIWAXS reverse problem<ul> <li> Input<ul> <li> Given peak positions (In the first quadrant only)</li> <li> A guess of \\(\\vec{G}\\)</li> </ul> </li> <li> DOF analysis<ul> <li> Original 9 degrees of freedom </li> <li> [\\(a^*_x\\),\\(a^*_y\\),\\(a^*_z\\)] [\\(b^*_x\\),\\(b^*_y\\),\\(b^*_z\\)] [\\(c^*_x\\),\\(c^*_y\\),\\(c^*_z\\)]</li> <li> Force \\(\\vec{a}^*\\) to be in [\\(a_x^*\\),0,\\(a_z^*\\)] direction (kills 1 degrees of freedom (DOF=8))</li> <li> Find the peak that is nearest to [0,0,0] (gives \\(a_x^*\\) and \\(a_z^*\\), (DOF=6))</li> <li> Remove peaks \\(\\vec{a}^*\\), \\(2\\vec{a}^*\\), \\(3\\vec{a}^*\\), ...</li> <li> Find the next nearest peak (gives [\\(b_{xy}^*\\),\\(b_z^*\\)] and kills 2 DOF (DOF=4))</li> </ul> </li> </ul> </li> </ul> <p>An example of class diagram:</p> <pre><code>classDiagram\n  Person &lt;|-- Student\n  Person &lt;|-- Professor\n  Person : +String name\n  Person : +String phoneNumber\n  Person : +String emailAddress\n  Person: +purchaseParkingPass()\n  Address \"1\" &lt;-- \"0..1\" Person:lives at\n  class Student{\n    +int studentNumber\n    +int averageMark\n    +isEligibleToEnrol()\n    +getSeminarsTaken()\n  }\n  class Professor{\n    +int salary\n  }\n  class Address{\n    +String street\n    +String city\n    +String state\n    +int postalCode\n    +String country\n    -validate()\n    +outputAsLabel()  \n  }</code></pre> <p>An example of program diagram:</p> <p><pre><code>stateDiagram-v2\n\n    CIF --&gt; POSCAR\n    POSCAR: POSCAR \n    POSCAR: Lattice Constants\n    POSCAR: Atom position\n    POSCAR --&gt; Bragg\n\n    Input1 --&gt; Bragg\n    Input1: Input\n    Input1: (hkl) dimensions\n    Input1: Rotation\n    Bragg: Bragg peak\n    Bragg: Bragg peak postitions in reciprocal space (3D)\n\n    Bragg --&gt; Intensity\n    Input2 --&gt; Intensity\n    Input2: Input\n    Input2: Peak Broadening parameters \n    Input2: 2D image grid\n    Intensity --&gt; 2d\n    2d: 2d image display</code></pre> An example of the table:</p> Method Description <code>GET</code>      Fetch resource <code>PUT</code>  Update resource <code>DELETE</code>      Delete resource"},{"location":"OFD/basic_models/","title":"Basic models","text":""},{"location":"OFD/basic_models/#solow-model","title":"Solow model","text":"<p>The Solow model focuses on four variables: output (Y), capital (K), labor (L), and \u2018\u2018knowledge\u2019\u2019 or the \u2018\u2018effectiveness of labor\u2019\u2019 (A).</p> \\[ Y(t)=F(K(t), A(t) L(t)), \\] <p>Assumption: </p> <p>(1) constant returns to scale (the economy is big enough that the gains from specialization have been exhausted)</p> <p>(2) Inputs other than capital, labor, and the effectiveness of labor are relatively unimportant.</p> \\[ F(c K, c A L)=c F(K, A L) \\quad \\text { for all } c \\geq 0 \\text {. } \\] <p>Intense form: $$ F\\left(\\frac{K}{A L}, 1\\right)=\\frac{1}{A L} F(K, A L) . $$</p> <p>where \\(k=\\frac{K}{A L}\\), \\(y=\\frac{Y}{A L}\\), \\(f(k)=F(k,1)\\). This output per unit of effective labor as a function of capital per unit of effective labor.</p>"},{"location":"OFD/basic_models/#properties-of-fk","title":"Properties of f(k)","text":"\\[ f(0)=0, \\quad \\text{No output if capital=0,} \\] \\[ f'(k)&gt;0, \\quad \\text{More output if add capitals,} \\] \\[ f''(k)&lt;0, \\quad \\text{You can not invest too much money on a single person.} \\] <p>Example of f(k), Cobb-Douglas function: $$ F(K, A L)=K^\\alpha(A L)^{1-\\alpha}, \\quad 0&lt;\\alpha&lt;1 . $$</p> <p>Verification: $$ F(cK, cAL)=c^\\alpha K^\\alpha(A L)^{1-\\alpha}c^{1-\\alpha}=cF(K,AL) $$</p> \\[ f(k)=k^\\alpha \\] \\[ f'(k)=\\alpha k^{\\alpha-1}&gt;0 \\] \\[ f''(k)=\\alpha(\\alpha-1) k^{\\alpha-2}&lt;0 \\]"},{"location":"OFD/basic_models/#the-evolution-of-the-inputs-into-production","title":"The Evolution of the Inputs into Production","text":"\\[ {L}(t)=L(0)e^{nt} \\] \\[ {A}(t)=A(0)e^{gt} \\] <p>Output is divided between consumption and investment. $$ \\dot{K}(t)=[Y(t)-C(t)]-\\delta K(t), $$</p> <p>where C denotes consumption, \\(\\delta\\) is existing capital depreciate rate.</p>"},{"location":"OFD/basic_models/#dynamics-of-k","title":"Dynamics of k","text":"\\[ \\begin{aligned} \\dot{k}(t) &amp; =\\frac{\\dot{K}(t)}{A(t) L(t)}-\\frac{K(t)}{[A(t) L(t)]^2}[A(t) \\dot{L}(t)+L(t) \\dot{A}(t)] \\\\ &amp; =\\frac{\\dot{K}(t)}{A(t) L(t)}-\\frac{K(t)}{A(t) L(t)} \\frac{\\dot{L}(t)}{L(t)}-\\frac{K(t)}{A(t) L(t)} \\frac{\\dot{A}(t)}{A(t)}\\\\ &amp; =\\frac{s Y(t)-\\delta K(t)}{A(t) L(t)}-k(t) n-k(t) g \\\\ &amp; =s \\frac{Y(t)}{A(t) L(t)}-\\delta k(t)-n k(t)-g k(t) \\\\ &amp; =sf(k(t))-(\\delta+n+g)k(t) \\end{aligned} \\] <p>where s is the fraction of that output that is invested.</p> Dynamics of k, coverges to k* The effect of save rate increase. <p>\u6709\u7ea6\u675f\u7684\u4f18\u5316\u95ee\u9898</p> <p>u(x1,x2) is the utility function. (The total happiness you can get by comsuming products.) x1, x2 are the quantity of two products. P1, P2 are the price of the two products. There is a budget limit, $$ P_1x_1+P_2x_2=I. $$</p> <p>Use Lagrangian multiplier to maximize u(x1,x2), $$ L=u(x_1,x_2)+\\lambda(I-P_1x_1-P_2x_2) $$</p> \\[ \\left\\{ \\begin{aligned}   &amp; \\frac{\\partial}{\\partial x_1}L=0 \\\\   &amp; \\frac{\\partial}{\\partial x_2}L=0\\\\   &amp; \\frac{\\partial}{\\partial \\lambda}L=0 \\end{aligned}\\right. \\] \\[ \\frac {\\partial u}{\\partial x_1}=P_1,\\quad \\frac {\\partial u}{\\partial x_2}=P_2 \\] \\[ =&gt;\\frac {m u_1}{m u_2}=\\frac{P_1}{P_2} \\] <p>The meaning of the last equation is that ratio of two products' marginal utility is proportional to the ratio of their prices.</p>"},{"location":"OFD/basic_models/#ramsey-model","title":"Ramsey model","text":"<p>Similar to Solow model, but the saving and comsuption rate is determined by the household utility. </p> \\[ U=\\int_{t=0}^{\\infty} e^{-\\rho t} u(C(t)) \\frac{L(t)}{H} d t \\] <p>C(t) is comsuption. L(t)/H is the number of members of the household. \u03c1 is the discount rate; the greater is \u03c1, the less the household values future consumption relative to current consumption.</p> <p>Utility function takes the form,</p> \\[ U(C(t))=\\frac{C(t)^{1-\\theta}}{1-\\theta}, \\quad \\theta&gt;0, \\quad \\rho-n-(1-\\theta) g&gt;0 \\] <p>\\(u'=c^{-\\theta}&gt;0\\), marginal utility is positive. \\(u''=-\\theta c^{-\\theta-1}&lt;0\\), marginal utility is decreasing.</p>"},{"location":"OFD/ofd_note/","title":"C++ \u6cca\u677e\u65b9\u7a0b\u6c42\u89e3\u5668","text":""},{"location":"OFD/ofd_note/#1","title":"1. \u6570\u5b66\u80cc\u666f","text":"<p>\u672c\u8282\u5c55\u793a\u6cca\u677e\u65b9\u7a0b\u7684\u6570\u5b66\u5f62\u5f0f\uff0c\u5305\u62ec\u5f31\u5f62\u5f0f\u3001\u79bb\u6563\u5316\u4ee5\u53ca\u725b\u987f\u8fed\u4ee3\u65b9\u6cd5\u3002</p>"},{"location":"OFD/ofd_note/#11","title":"1.1 \u7b26\u53f7\u8bf4\u660e","text":"\u7c7b\u578b \u5b57\u4f53\u683c\u5f0f \u793a\u4f8b \u51fd\u6570 / \u53c2\u6570 / \u4e0b\u6807 \u5c0f\u5199\u5b57\u6bcd \\(a\\) \u77e9\u9635 \u82b1\u4f53\u5b57\u6bcd \\(\\mathcal{A}\\) \u77e9\u9635/\u5411\u91cf\u7684\u5143\u7d20 \u5e26\u4e0b\u6807\u7684\u5b57\u6bcd \\(a_i\\), \\(A_{ij}\\) \u5411\u91cf \u5927\u5199\u7c97\u4f53\u5b57\u6bcd \\(\\mathbf{A}\\)"},{"location":"OFD/ofd_note/#12","title":"1.2 \u6cca\u677e\u65b9\u7a0b","text":"<p>\u6cca\u677e\u65b9\u7a0b\u7684\u4e00\u822c\u5f62\u5f0f\u4e3a\uff1a</p> \\[ \\nabla\\cdot(\\nabla u)=f,\\quad \\text{\u5728}\\quad \\Omega, \\] <p>\u5176\u4e2d \\(u\\) \u548c \\(f\\) \u662f\u5b9a\u4e49\u5728\u6d41\u5f62 \\(\\Omega\\) \u4e0a\u7684\u51fd\u6570\u3002</p>"},{"location":"OFD/ofd_note/#13","title":"1.3 \u5f31\u5f62\u5f0f","text":"<p>\u5f3a\u5f62\u5f0f\u8981\u6c42 \\(u\\) \u5728\u533a\u57df \\(\\Omega\\) \u5185\u9010\u70b9\u6ee1\u8db3 PDE\u3002 \u5728\u6570\u503c PDE \u4e2d\uff0c\u901a\u5e38\u91c7\u7528\u5f31\u5f62\u5f0f\u6765\u653e\u5bbd\u5bf9\u89e3\u7684\u5149\u6ed1\u6027\u8981\u6c42\uff1a</p> \\[ \\int_\\Omega \\nabla\\cdot(\\nabla u)\\,\\nu \\, d\\Omega = \\int_\\Omega f\\nu \\, d\\Omega, \\] <p>\u5176\u4e2d \\(\\nu\\) \u662f\u6d4b\u8bd5\u51fd\u6570\uff0c\u8981\u6c42 \\(\\nu\\) \u53ca \\(\\nabla \\nu\\) \u5728 \\(\\Omega\\) \u4e0a\u5e73\u65b9\u53ef\u79ef\u3002</p> <p>\u901a\u8fc7\u5206\u90e8\u79ef\u5206\uff0c\u5f31\u5f62\u5f0f\u53d8\u4e3a\uff1a</p> \\[ -\\int_\\Omega \\nabla\\nu \\cdot \\nabla u \\, d\\Omega + \\int_{\\partial\\Omega} (n\\cdot \\nabla u)\\nu \\, dS = \\int_\\Omega f\\nu \\, d\\Omega. \\] <p>\u82e5\u6d4b\u8bd5\u51fd\u6570 \\(\\nu\\) \u5728\u8fb9\u754c \\(\\partial \\Omega\\) \u4e0a\u4e3a\u96f6\uff0c\u5219\u8fb9\u754c\u9879\u6d88\u5931\uff0c\u5f97\u5230\uff1a</p> \\[ -\\int_\\Omega \\nabla\\nu \\cdot \\nabla u \\, d\\Omega = \\int_\\Omega f\\nu \\, d\\Omega,\\quad \\nu=0 \\;\\;\\text{\u5728}\\;\\;\\partial\\Omega. \\]"},{"location":"OFD/ofd_note/#14-galerkin","title":"1.4 Galerkin \u65b9\u6cd5","text":"<p>\u5f31\u5f62\u5f0f\u8981\u6c42\u79ef\u5206\u5bf9 Hilbert \u7a7a\u95f4 \\(V\\) \u4e2d\u4efb\u610f\u6d4b\u8bd5\u51fd\u6570\u6210\u7acb\u3002\u4f46 \\(V\\) \u662f\u65e0\u9650\u7ef4\u7684\u3002 Galerkin \u65b9\u6cd5\u9009\u62e9\u4e00\u4e2a\u6709\u9650\u7ef4\u5b50\u7a7a\u95f4 \\(V_n \\subset V\\)\uff0c\u4f7f\u6d4b\u8bd5\u51fd\u6570\u843d\u5728\u5176\u4e2d\u3002\u5f31\u5f62\u5f0f\u5199\u4f5c\uff1a</p> \\[ \\text{\u5bfb\u627e}\\; U_n\\in V_n,\\;\\; \\text{\u4f7f\u5f97}\\;\\forall\\nu\\in V_n:\\;\\; -\\int_\\Omega \\nabla\\nu \\cdot \\nabla U_n \\, d\\Omega = \\int_\\Omega f\\nu \\, d\\Omega \\] <p>\u8bbe \\(\\{e_1, e_2, ..., e_n\\}\\) \u662f \\(V_n\\) \u7684\u4e00\u7ec4\u57fa\u51fd\u6570\uff0c\u95ee\u9898\u53ef\u5199\u6210\uff1a</p> \\[ \\forall i\\in [1,2,...,n],\\quad -\\int_\\Omega \\nabla e_i \\cdot \\nabla U_n \\, d\\Omega = \\int_\\Omega f e_i \\, d\\Omega \\] <p>\u5c06 \\(U_n\\) \u5c55\u5f00\u4e3a\uff1a</p> \\[ U_n=\\sum_i u_i e_i \\] <p>\u4ee3\u5165\u540e\u5f97\u5230\u77e9\u9635\u5f62\u5f0f\uff1a</p> \\[ \\mathcal{A}U=\\mathcal{F} \\] <p>\u5176\u4e2d\uff1a</p> \\[ \\mathcal{A}=\\left(     \\begin{matrix} A_{11} &amp; A_{12} &amp; ... &amp; A_{1n} \\\\ &amp;  &amp; ... &amp; \\\\ A_{n1} &amp; A_{n2} &amp; ... &amp; A_{nn} \\end{matrix} \\right),\\quad A_{ij}=- \\int_\\Omega \\nabla e_i \\cdot \\nabla e_j \\, d\\Omega \\] \\[ U=[u_1,u_2,...,u_n]^T \\] \\[ f=[f_1,f_2,..,f_n]^T,\\quad f_i=\\int_\\Omega f e_i \\, d\\Omega \\]"},{"location":"OFD/ofd_note/#15","title":"1.5 \u725b\u987f\u8fed\u4ee3\u6cd5","text":"<p>\u725b\u987f\u6cd5\u7528\u4e8e\u6c42\u89e3\u975e\u7ebf\u6027 PDE\uff08\u5373 \\(f\\) \u4e0e \\(u\\) \u6709\u5173\uff09\u3002  </p> <p>\u6b8b\u5dee\u5411\u91cf \\(\\mathbf{R}\\) \u5b9a\u4e49\u4e3a\uff1a</p> \\[ R_i=-\\sum_j u_j \\int_\\Omega \\nabla e_i \\cdot \\nabla e_j \\, d\\Omega - \\int_\\Omega f e_i \\, d\\Omega, \\] <p>\u96c5\u53ef\u6bd4\u77e9\u9635 \\(\\mathcal{K}\\) \u5b9a\u4e49\u4e3a\uff1a</p> \\[ K_{ij}=\\frac{\\partial R_i}{\\partial u_j}=-\\int_\\Omega \\nabla e_i \\cdot \\nabla e_j \\, d\\Omega - \\int_\\Omega f'(u) e_i e_j \\, d\\Omega. \\] <p>\u725b\u987f\u8fed\u4ee3\u6b65\u9aa4\u4e3a\uff1a</p> \\[ U_{n+1}=U_n - \\frac{R(u)}{R'(u)} \\] <p>\u77e9\u9635\u5f62\u5f0f\u4e3a\uff1a</p> \\[ \\mathcal{K}\\,\\delta \\mathbf{U} = -\\mathbf{R}. \\] <p>\u539f\u6587\u6863\u4e2d\uff0c1.5\u548c1.6\u7684\u5f62\u5f0f\u4e3a\uff1a</p> Fig 1. \u539f\u6587\u6863\u4e2d\u76841.5\u548c1.6\u5f0f <p>\u5982\u679c\u5c06\u57fa\u51fd\u6570\u66ff\u6362\u4e3a\u5f62\u51fd\u6570\uff0c\u53ef\u4ee5\u770b\u51fa\\(\\mathcal{K}\\)\u53d8\u4e3a\u6709\u9650\u5143\u7684\u5355\u5143\u521a\u5ea6\u77e9\u9635\\(k^{(e)}\\)\uff1b\\(-\\mathbf{R}\\)\u53d8\u4e3a\u6709\u9650\u5143\u7684\u8377\u8f7d\u5411\u91cf\\(f^{(e)}\\)\u3002</p>"},{"location":"OFD/ofd_note/#2","title":"2. \u5355\u5143\u9879\u7684\u8ba1\u7b97","text":""},{"location":"OFD/ofd_note/#21","title":"2.1 \u5f62\u51fd\u6570\u4e0e\u68af\u5ea6","text":"<p>\u5728\u53c2\u8003\u5355\u5143 \\((\\xi, \\eta)\\) \u4e0a\u5b9a\u4e49\u5f62\u51fd\u6570\uff1a</p> <ul> <li>\u4e09\u89d2\u5f62\u5355\u5143\uff1a\u7ebf\u6027\u5f62\u51fd\u6570</li> </ul> \\[ N_1 = 1 - \\xi - \\eta,\\quad N_2 = \\xi,\\quad N_3 = \\eta \\] <ul> <li>\u56db\u8fb9\u5f62\u5355\u5143\uff1a\u53cc\u7ebf\u6027\u5f62\u51fd\u6570</li> </ul> \\[ N_1 = \\tfrac{1}{4}(1-\\xi)(1-\\eta),\\quad N_2 = \\tfrac{1}{4}(1+\\xi)(1-\\eta),\\dots \\] <p>\u540c\u65f6\u8ba1\u7b97\u5176\u5bf9\u5c40\u90e8\u5750\u6807\u7684\u5bfc\u6570 \\(\\partial N_i / \\partial \\xi, \\partial N_i / \\partial \\eta\\)\u3002</p>"},{"location":"OFD/ofd_note/#22","title":"2.2 \u5750\u6807\u53d8\u6362\u4e0e\u96c5\u53ef\u6bd4\u77e9\u9635","text":"<p>\u901a\u8fc7\u96c5\u53ef\u6bd4\u77e9\u9635 \\(\\mathcal{K}\\) \u5c06\u53c2\u8003\u5355\u5143\u79ef\u5206\u53d8\u6362\u5230\u7269\u7406\u5355\u5143\uff1a</p> \\[ \\nabla N_i = \\mathcal{K}^{-1} \\begin{bmatrix} \\partial N_i / \\partial \\xi \\\\ \\partial N_i / \\partial \\eta \\end{bmatrix}, \\qquad d\\Omega = \\det(\\mathcal{K}) \\, d\\xi d\\eta \\]"},{"location":"OFD/ofd_note/#23","title":"2.3 \u6570\u503c\u79ef\u5206\uff08\u9ad8\u65af\u79ef\u5206\uff09","text":"<p>\u5c06\u79ef\u5206\u79bb\u6563\u4e3a\u9ad8\u65af\u70b9\u6c42\u548c\uff0c\u4f8b\u5982\u4e09\u9636\u9ad8\u65af\u79ef\u5206\uff1a</p> \\[ \\int_{\\Omega_e} g(x,y) \\, d\\Omega \\;\\;\\approx\\;\\; \\sum_{q=1}^{n_q} g(x_q, y_q) \\, w_q \\, |\\det(\\mathcal{K})| \\] <p>\u5176\u4e2d \\((x_q,y_q)\\) \u4e3a\u79ef\u5206\u70b9\u5750\u6807\uff0c\\(w_q\\) \u4e3a\u6743\u91cd\u3002</p>"},{"location":"OFD/ofd_note/#24","title":"2.4 \u7ec4\u88c5\u5355\u5143\u77e9\u9635\u4e0e\u5411\u91cf","text":"<p>\u5728\u6bcf\u4e2a\u79ef\u5206\u70b9\uff0c\u8ba1\u7b97\uff1a</p> <ul> <li> <p>\u63d2\u503c\u89e3 \\(u(x_q,y_q)\\)\uff1b</p> </li> <li> <p>\u6e90\u9879 \\(f(u,x_q,y_q)\\)\uff1b</p> </li> <li> <p>\u68af\u5ea6\u9879 \\(\\nabla N_i \\cdot \\nabla N_j\\)\uff1b</p> </li> <li> <p>\u5e76\u7d2f\u52a0\u5230 <code>Ke</code> \u548c <code>Fe</code>\u3002</p> </li> </ul> <p>\u4f2a\u4ee3\u7801\u793a\u610f\uff1a</p> <pre><code>Ke(k,l) += (grad_phi(k) \u00b7 grad_phi(l) - Ni*Nj * dfdu_q) * weight;\nFe(k)   += (grad_phi(k) \u00b7 grad_uq - f_q * Ni) * weight;\n</code></pre> <p>\u7a0b\u5e8f\u5bf9\u5e94\u5173\u7cfb</p> \u6570\u5b66\u7b26\u53f7 \u7a0b\u5e8f\u53d8\u91cf \u542b\u4e49 \\(k^{(e)}\\) <code>Ke</code> \u5355\u5143\u521a\u5ea6\u77e9\u9635 \\(f^{(e)}\\) <code>Fe</code> \u5355\u5143\u6b8b\u5dee/\u8f7d\u8377\u5411\u91cf \\(\\mathbf{R}\\) <code>R</code> \u5168\u5c40\u6b8b\u5dee\u5411\u91cf\uff08\u7531\u6240\u6709 <code>Fe</code> \u88c5\u914d\uff09 \\(\\mathcal{K}\\) <code>K</code> \u5168\u5c40\u96c5\u53ef\u6bd4\u77e9\u9635\uff08\u7531\u6240\u6709 <code>Ke</code> \u88c5\u914d\uff09"},{"location":"OFD/ofd_note/#3","title":"3. \u5355\u5143\u53e0\u52a0\u5230\u5168\u5c40\u7cfb\u7edf\u7684\u7b97\u6cd5\u8bf4\u660e","text":"<p>\u5355\u5143\u521a\u5ea6\u77e9\u9635 \\(k^{(e)}\\) \u548c\u5355\u5143\u6b8b\u5dee\u5411\u91cf \\(f^{(e)}\\) \u4ec5\u5bf9\u5e94\u4e00\u4e2a\u5c40\u90e8\u5355\u5143\u3002\u4e3a\u4e86\u5f97\u5230\u6574\u4f53\u95ee\u9898\u7684\u5168\u5c40\u65b9\u7a0b\uff0c\u9700\u8981\u5c06\u6240\u6709\u5355\u5143\u7684\u8d21\u732e\u88c5\u914d\u5230\u5168\u5c40\u96c5\u53ef\u6bd4\u77e9\u9635 \\(K\\) \u548c\u5168\u5c40\u6b8b\u5dee\u5411\u91cf \\(R\\) \u4e2d\u3002  </p>"},{"location":"OFD/ofd_note/#31","title":"3.1 \u8282\u70b9\u7f16\u53f7\u6620\u5c04","text":"<p>\u6bcf\u4e2a\u5355\u5143\u7684\u81ea\u7531\u5ea6\uff08\u8282\u70b9\u7f16\u53f7\uff09\u662f\u5c40\u90e8\u7684\uff0c\u9700\u8981\u901a\u8fc7 \u8282\u70b9\u5168\u5c40 ID \u5efa\u7acb\u5355\u5143\u81ea\u7531\u5ea6\u4e0e\u5168\u5c40\u81ea\u7531\u5ea6\u7684\u5bf9\u5e94\u5173\u7cfb\u3002 \u8bb0\u5355\u5143\u8282\u70b9 ID \u4e3a \\(\\{I_1, I_2, \\dots, I_n\\}\\)\uff0c\u5219\u5728\u88c5\u914d\u65f6\u6709\uff1a</p> \\[ K(I_a, I_b) \\;+=\\; k^{(e)}_{ab},  \\qquad  R(I_a) \\;+=\\; f^{(e)}_{a} \\]"},{"location":"OFD/ofd_note/#32","title":"3.2 \u5168\u5c40\u77e9\u9635\u4e0e\u5411\u91cf\u66f4\u65b0","text":"<p>\u904d\u5386\u6240\u6709\u5355\u5143\uff0c\u5bf9\u5176\u5c40\u90e8\u77e9\u9635\u4e0e\u5411\u91cf\u4f9d\u6b21\u7d2f\u52a0\u5230\u5168\u5c40\u7cfb\u7edf\u4e2d\uff1a</p> <pre><code>for each element e:\n    ids = element.node_ids()   // \u5355\u5143\u7684\u5168\u5c40\u8282\u70b9\u7f16\u53f7\n    Ke, Fe = compute_element_matrices(e)\n    for a in ids:\n        R[a] += Fe[a]\n        for b in ids:\n            K[a,b] += Ke[a,b]\n</code></pre>"},{"location":"OFD/ofd_note/#4","title":"4. \u72c4\u5229\u514b\u96f7\u8fb9\u754c\u6761\u4ef6\u7684\u65bd\u52a0","text":"\\[ u(x,y) = g(x,y), \\quad (x,y) \\in \\Gamma_D \\] <p>\u5176\u4e2d \\(\\Gamma_D\\) \u8868\u793a\u72c4\u5229\u514b\u96f7\u8fb9\u754c\uff0c\\(g(x,y)\\) \u662f\u7ed9\u5b9a\u7684\u8fb9\u754c\u51fd\u6570\u3002</p> <p>\u5bf9\u4e8e\u8fb9\u754c\u4e0a\u7684\u67d0\u4e2a\u81ea\u7531\u5ea6 \\(i\\)\uff0c\u5176\u89e3\u503c\u5e94\u6ee1\u8db3\uff1a</p> \\[ u_i = g_i \\] <p>\u8fd9\u610f\u5473\u7740\u8be5\u81ea\u7531\u5ea6\u4e0d\u518d\u7531\u65b9\u7a0b\u7cfb\u7edf\u6c42\u89e3\uff0c\u800c\u662f\u88ab\u76f4\u63a5\u7ea6\u675f\u3002 \u56e0\u6b64\uff0c\u9700\u8981\u5728\u6570\u503c\u4ee3\u6570\u7cfb\u7edf\u4e2d\u201c\u6d88\u9664\u201d\u8be5\u672a\u77e5\u6570\u7684\u81ea\u7531\u5ea6\u3002</p>"},{"location":"OFD/ofd_note/#41","title":"4.1 \u4fee\u6539\u5168\u5c40\u77e9\u9635\u548c\u6b8b\u5dee","text":"<p>\u5e38\u7528\u7684\u72c4\u5229\u514b\u96f7\u8fb9\u754c\u6761\u4ef6\u65bd\u52a0\u65b9\u6cd5\u662f \u4fee\u6539\u5168\u5c40\u77e9\u9635\u548c\u6b8b\u5dee\uff1a</p> <ol> <li>\u6e05\u96f6\u77e9\u9635\u5bf9\u5e94\u7684\u884c\u548c\u5217 </li> </ol> <p>\u5bf9\u4e8e\u8fb9\u754c\u81ea\u7531\u5ea6 \\(i\\)\uff0c\u5c06\u5168\u5c40\u96c5\u53ef\u6bd4\u77e9\u9635\u7684\u7b2c \\(i\\) \u884c\u548c\u7b2c \\(i\\) \u5217\u6e05\u96f6\uff0c\u53ea\u5728\u5bf9\u89d2\u7ebf\u4e0a\u4fdd\u7559 1\uff1a</p> <p>$$    K(i,:) = 0, \\quad K(:,i) = 0, \\quad K(i,i) = 1    $$ 2. \u4fee\u6539\u6b8b\u5dee\u5411\u91cf </p> <p>\u5c06\u6b8b\u5dee\u5411\u91cf\u5bf9\u5e94\u4f4d\u7f6e\u6539\u4e3a\uff1a</p> <p>$$    R(i) = u(i) - g_i    $$</p> <p>\u5176\u4e2d \\(u(i)\\) \u662f\u5f53\u524d\u8fed\u4ee3\u89e3\uff0c\\(g_i\\) \u662f\u8fb9\u754c\u503c\u3002\u8fd9\u6837\u4fdd\u8bc1\u8fed\u4ee3\u8fc7\u7a0b\u4e2d \\(u(i)\\) \u59cb\u7ec8\u6536\u655b\u5230\u8fb9\u754c\u51fd\u6570\u3002</p>"},{"location":"OFD/ofd_note/#42","title":"4.2 \u7a0b\u5e8f\u5b9e\u73b0\u903b\u8f91","text":"<p>\u5728\u4ee3\u7801\u4e2d\uff0c\u72c4\u5229\u514b\u96f7\u8fb9\u754c\u6761\u4ef6\u7684\u5904\u7406\u51fa\u73b0\u5728<code>assembleForIteration</code> \u4e2d\uff0c\u903b\u8f91\u5982\u4e0b\uff1a</p> <pre><code>for each node i:\n    if node(i) \u5728\u8fb9\u754c:\n        double ubc = gD(x,y);   // \u8fb9\u754c\u503c g(x,y)\n        // \u4fee\u6539\u5168\u5c40\u77e9\u9635\n        for j in all nodes:\n            K(i,j) = 0.0;\n            K(j,i) = 0.0;\n        K(i,i) = 1.0;\n        // \u4fee\u6539\u6b8b\u5dee\u5411\u91cf\n        R(i) = u(i) - ubc;\n</code></pre>"},{"location":"tags/","title":"Tags","text":"<p>Following is a list of relevant tags:</p>"}]}